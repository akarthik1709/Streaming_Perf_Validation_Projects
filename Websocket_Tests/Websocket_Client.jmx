<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="NUM_USERS" elementType="Argument">
            <stringProp name="Argument.name">NUM_USERS</stringProp>
            <stringProp name="Argument.value">${__P(NUM_USERS,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">${__P(HOST,172.17.230.6)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TERM_LIMIT" elementType="Argument">
            <stringProp name="Argument.name">TERM_LIMIT</stringProp>
            <stringProp name="Argument.value">${__P(TERM_LIMIT,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="api_ver" elementType="Argument">
            <stringProp name="Argument.name">api_ver</stringProp>
            <stringProp name="Argument.value">${__P(API_VER,1.1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_DURATION" elementType="Argument">
            <stringProp name="Argument.name">TEST_DURATION</stringProp>
            <stringProp name="Argument.value">${__P(TEST_DURATION,180)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NUM_STATS_METRICS" elementType="Argument">
            <stringProp name="Argument.name">NUM_STATS_METRICS</stringProp>
            <stringProp name="Argument.value">${__P(NUM_STATS_METRICS,91)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NUM_STATUS_METRICS" elementType="Argument">
            <stringProp name="Argument.name">NUM_STATUS_METRICS</stringProp>
            <stringProp name="Argument.value">${__P(NUM_STATUS_METRICS,8)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESOLUTION" elementType="Argument">
            <stringProp name="Argument.name">RESOLUTION</stringProp>
            <stringProp name="Argument.value">${__P(RESOLUTION,30)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="alarms_ws_connected" elementType="Argument">
            <stringProp name="Argument.name">alarms_ws_connected</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="events_ws_connected" elementType="Argument">
            <stringProp name="Argument.name">events_ws_connected</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="stats_ws_connected" elementType="Argument">
            <stringProp name="Argument.name">stats_ws_connected</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="status_ws_connected" elementType="Argument">
            <stringProp name="Argument.name">status_ws_connected</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TERM_NAME_PREFIX" elementType="Argument">
            <stringProp name="Argument.name">TERM_NAME_PREFIX</stringProp>
            <stringProp name="Argument.value">${__P(TERM_NAME_PREFIX,SIT_IQ_Desktop)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CREDENTIALS_CSV" elementType="Argument">
            <stringProp name="Argument.name">CREDENTIALS_CSV</stringProp>
            <stringProp name="Argument.value">${__P(CREDENTIALS_CSV,multiuser_credentials_n_users.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="enable_ping_pong" elementType="Argument">
            <stringProp name="Argument.name">enable_ping_pong</stringProp>
            <stringProp name="Argument.value">${__P(enable_ping_pong,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ping_pong_interval" elementType="Argument">
            <stringProp name="Argument.name">ping_pong_interval</stringProp>
            <stringProp name="Argument.value">${__P(ping_pong_interval,30)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="metric_stats_list" elementType="Argument">
            <stringProp name="Argument.name">metric_stats_list</stringProp>
            <stringProp name="Argument.value">${__P(metric_stats_list)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="metric_status_list" elementType="Argument">
            <stringProp name="Argument.name">metric_status_list</stringProp>
            <stringProp name="Argument.value">${__P(metric_status_list)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="epoch_time" elementType="Argument">
            <stringProp name="Argument.name">epoch_time</stringProp>
            <stringProp name="Argument.value">${__P(epoch_time)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="all_terminal_obj_ids" elementType="Argument">
            <stringProp name="Argument.name">all_terminal_obj_ids</stringProp>
            <stringProp name="Argument.value">${__P(all_terminal_obj_ids,1691420)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="initial_command_execution" elementType="Argument">
            <stringProp name="Argument.name">initial_command_execution</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="end_test" elementType="Argument">
            <stringProp name="Argument.name">end_test</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="build_number" elementType="Argument">
            <stringProp name="Argument.name">build_number</stringProp>
            <stringProp name="Argument.value">${__P(buildNumber, 123)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DEBUG_FLAG" elementType="Argument">
            <stringProp name="Argument.name">DEBUG_FLAG</stringProp>
            <stringProp name="Argument.value">${__P(debug_flag,false)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Logging" elementType="Argument">
            <stringProp name="Argument.name">Logging</stringProp>
            <stringProp name="Argument.value">${__P(Logging,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xmlfile" elementType="Argument">
            <stringProp name="Argument.name">xmlfile</stringProp>
            <stringProp name="Argument.value">${__P(xml_file,&apos;&apos;)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="textfile" elementType="Argument">
            <stringProp name="Argument.name">textfile</stringProp>
            <stringProp name="Argument.value">${__P(text_file,&apos;&apos;)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csvfile" elementType="Argument">
            <stringProp name="Argument.name">csvfile</stringProp>
            <stringProp name="Argument.value">${__P(csv_file,&apos;&apos;)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="new_connection_logging" elementType="Argument">
            <stringProp name="Argument.name">new_connection_logging</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Delete cookie file" enabled="true">
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">import org.apache.jmeter.services.FileServer;

File file1 = new File(&quot;results12.csv&quot;);
if (file1.exists()) {
file1.delete(); 
}</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223PreProcessor>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
        <stringProp name="filename">./${CREDENTIALS_CSV}</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">username,password</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Get Config - HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">http://${HOST}</stringProp>
            <stringProp name="Authorization.username">${username}</stringProp>
            <stringProp name="Authorization.password">${password}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Get Config - Get Necessary Variables" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">//Record test start for working out average TPM
import org.apache.commons.codec.binary.Base64;
Long startTime = ${__javaScript(Math.round(new Date().getTime() / 1000))};
vars.put(&quot;starttime&quot;,String.valueOf(startTime));
//props.put(&quot;COUNT&quot;,2);

byte[] encodedUsernamePassword = Base64.encodeBase64(&quot;${username}:${password}&quot;.getBytes());
vars.put(&quot;base64HeaderValue&quot;,new String(encodedUsernamePassword));
</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Get Config" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${TEST_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">vars.put(&quot;sid1&quot;, &quot;sid=::&quot;+ vars.get(&quot;Thread_WS_Cookie&quot;)+ &quot;;&quot;);
log.info(&quot;THE SAID VALUE IS&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;+vars.get(&quot;sid1&quot;));

//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;

//CookieManager manager = sampler.getCookieManager();
//Cookie cookie = new Cookie(&quot;Cookie&quot;, &quot;${sid}&quot;, &quot;${HOST}&quot;, &quot;/&quot;, false, 0);
//manager.add(cookie);</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - Get Element List" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${TERM_LIMIT}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
              <elementProp name="obj_name__contains" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${TERM_NAME_PREFIX}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">obj_name__contains</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/1.0/config/element/terminal</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Main HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Use-Cookie</stringProp>
                <stringProp name="Header.value">false</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Config - JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">obj_id_list</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..obj_id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get Config - Object List" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//Initial Get Config Post Processor
String myObj = &quot;${obj_id_list}&quot;; 
String trimmed_myObj=myObj.substring(1,(myObj.length()-1));

bsh.shared.objList = myObj;
props.put(&quot;OBJECT_LIST&quot;, myObj);

String STATS_METRIC_LIST =(&quot;2241,2242,1064,1065,1066,1067,2318,2321,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,2322,1098,2323,2324,2243,1101,1102,1103,1104,1105,1106,1107,1108,1109,1111,1112,1113,1114,1115,1117,1118,1119,1120,1121,1129,1130,1131,1132,1138,1690,1140,1141,1142,2279,1703,1146,1705,2239,1681,1148,1149,1159,1160,1710,1711,2430,1693,2355,1277,1279,2432,2328,1316,1317,1318,1319,1320&quot;); 
String[] metricArray = STATS_METRIC_LIST.split(&quot;,&quot;);
StringBuilder sbStr = new StringBuilder();
Integer metricCnt = Integer.parseInt(vars.get(&quot;NUM_STATS_METRICS&quot;));
for (int i = 0, il = Math.min(metricCnt,metricArray.length); i &lt; il; i++) {
    if (i &gt; 0)
        sbStr.append(&quot;,&quot;);
    sbStr.append(metricArray[i]);
}
props.put(&quot;vars_metric_list_stats&quot;,sbStr.toString());
//vars.put(&quot;vars_metric_list_stats&quot;,sbStr.toString());

String STATUS_METRIC_LIST =(&quot;1667,1701,2516,1675,1676,1677,1678&quot;);
metricArray = STATUS_METRIC_LIST.split(&quot;,&quot;);
sbStr = new StringBuilder();
metricCnt = Integer.parseInt(vars.get(&quot;NUM_STATUS_METRICS&quot;));
for (int i = 0, il = Math.min(metricCnt,metricArray.length); i &lt; il; i++) {
    if (i &gt; 0)
        sbStr.append(&quot;,&quot;);
    sbStr.append(metricArray[i]);
}
props.put(&quot;vars_metric_list_status&quot;,sbStr.toString());
//vars.put(&quot;vars_metric_list_status&quot;,sbStr.toString());


</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get Config - Global AUTH cookie" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
CookieManager manager = ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">code</stringProp>
            <stringProp name="RegexExtractor.refname">SamplerJSONResult_errors</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;errors\\&quot;:(\[\]|\[.*\])</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">[]</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Cookie" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">Thread_WS_Cookie</stringProp>
            <stringProp name="RegexExtractor.regex">Set-Cookie: sid=::([A-Za-z0-9].*::[A-Za-z0-9].*);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">log.info(&quot;The Thread value given as&quot;+vars.get(&quot;Thread_WS_Cookie&quot;));

vars.put(&quot;sid1&quot;, &quot;sid=::&quot;+ vars.get(&quot;Thread_WS_Cookie&quot;)+ &quot;;&quot;);
log.info(&quot;THE SAID VALUE IS&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;+vars.get(&quot;sid1&quot;));


</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">${__setProperty(cookie_orig,${Thread_WS_Cookie})};

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">props.put(&quot;SID&quot;, vars.get(&quot;sid1&quot;));



FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results12.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="0"></stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="jp@gc - Ultimate Thread Group - Alarms-New" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="878778800">
            <stringProp name="478152815">${__evalVar(NUM_USERS)}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="1629">30</stringProp>
            <stringProp name="-1857560941">${TEST_DURATION}</stringProp>
            <stringProp name="53430">600</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <InterleaveControl guiclass="InterleaveControlGui" testclass="InterleaveControl" testname="Interleave Controller" enabled="false">
            <intProp name="InterleaveControl.style">1</intProp>
            <boolProp name="InterleaveControl.accrossThreads">false</boolProp>
          </InterleaveControl>
          <hashTree>
            <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="Runtime Controller" enabled="false">
              <stringProp name="RunTime.seconds">10</stringProp>
            </RunTime>
            <hashTree/>
          </hashTree>
          <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="Runtime Controller" enabled="false">
            <stringProp name="RunTime.seconds">60</stringProp>
          </RunTime>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.CloseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.CloseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.CloseWebSocketSampler" testname="WebSocket Close" enabled="false">
            <stringProp name="statusCode">1000</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
          </eu.luminis.jmeter.wssampler.CloseWebSocketSampler>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.TextFrameFilter guiclass="eu.luminis.jmeter.wssampler.TextFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.TextFrameFilter" testname="WebSocket Text Frame Filter" enabled="true">
            <stringProp name="comparisonType">Contains</stringProp>
            <stringProp name="matchValue">User session</stringProp>
          </eu.luminis.jmeter.wssampler.TextFrameFilter>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - main" enabled="true">
            <stringProp name="IfController.condition">&quot;${alarms_ws_connected}&quot;==&quot;false&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">./${CREDENTIALS_CSV}</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">username,password</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var startTimeAlarms = ${__time(/1000,)};
vars.put(&quot;alarms_start_time1&quot;, String.valueOf(startTimeAlarms));

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="Open Alarm WebSocket Sampler - ${__threadNum}" enabled="true">
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server">${HOST}</stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path">/api/${api_ver}/dde/alarm?object_id__in=${all_terminal_obj_ids}&amp;timestamp__gte=${alarms_start_time1}&amp;batch=true&amp;stream=true</stringProp>
              <stringProp name="readTimeout">120000</stringProp>
              <stringProp name="connectTimeout">100000</stringProp>
            </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">

//props.put(&quot;sessionValue1&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionValueSid1&quot;, &quot;sid=::&quot;+ vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionPostValue1&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;cookiepresent&quot;, ${COOKIE_sid});

//String details = vars.get(&quot;cookie_value&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
//System.out.println(&quot;The session post value&quot;+sessionPostValue);

//log.info(&quot;Cookie value&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+${COOKIE_}+props.get(&quot;sessionValue1&quot;));

import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy;
HTTPSamplerProxy sampler = ctx.getCurrentSampler();

import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, vars.get(&quot;sessionPostValue1&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);

//props.put(&quot;sessionCookiePost&quot;, ${Cookie_}+&quot;::&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;))

//Cookie cookie1 = new Cookie(&quot;SERVERID&quot;, serv1, &quot;${HOST}&quot;, &quot;/&quot;, false, 0)
//manager.add(cookie1)

import org.apache.jmeter.protocol.http.control.CookieManager;
import org.appache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue1&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <kg.apc.jmeter.modifiers.FifoPopPreProcessor guiclass="kg.apc.jmeter.modifiers.FifoPopPreProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPopPreProcessor" testname="jp@gc - Inter-Thread Communication PreProcessor" enabled="false">
                <stringProp name="Timeout"></stringProp>
                <stringProp name="Variable">sid1</stringProp>
                <stringProp name="FifoName">SYNC_FIFO</stringProp>
              </kg.apc.jmeter.modifiers.FifoPopPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Alarms Open WebSocket PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">

if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
     prev.setSuccessful(false);
     vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
}
if (prev.getResponseCode().equals(&quot;101&quot;)) {
     vars.put(&quot;alarms_ws_connected&quot;,&quot;true&quot;);
}
if (prev.getResponseMessage().equals(&quot;Close&quot;)) {
     vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}


log.info(&quot;GET RESPONSE MESSAGE&gt;&gt;&gt;&gt;&quot;+prev.getResponseMessage());

var start_time =  ${__time(/1000,)};
vars.put(&quot;alarms_start_time&quot;, String.valueOf(start_time));

vars.put(&quot;run_alarms_ping_pong_sampler&quot;, &quot;false&quot;);

String var_name = &quot;alarm_records_count_thread_&quot; + ${__threadNum} ; 
props.put(var_name, &quot;0&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">props.put(&quot;SID&quot;, vars.get(&quot;sid1&quot;));



FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results12.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2086234248">User&apos;s session does not match the value of session_id passed to the web service</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">No Response</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get Config - Global AUTH cookie" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
CookieManager manager = ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">SamplerJSONResult_errors</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;errors\\&quot;:(\[\]|\[.*\])</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">[]</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Cookie" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">Thread_WS_Cookie2</stringProp>
                <stringProp name="RegexExtractor.regex">cookie: sid=::([A-Za-z0-9].*::[A-Za-z0-9].*?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">log.info(&quot;The ALARMS NEW COOKIE IS&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;));

if ( vars.get(&quot;Thread_WS_Cookie2&quot;).length == 0){
	vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;)
}

props.put(&quot;sessionValue2&quot;, vars.get(&quot;Thread_WS_Cookie2&quot;));
props.put(&quot;sessionValueSid2&quot;, vars.get(&quot;Thread_WS_Cookie2&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue2&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;));
props.put(&quot;sessionPostSidValue2&quot;, &quot;sid=::&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;));

props.put(&quot;sessionCookieValue1&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;))
props.put(&quot;sessionCookieValue12&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;))



import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue2&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);


FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results123.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();

//vars.put(&quot;alarms_ws_connected&quot;, &quot;true&quot;)</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <eu.luminis.jmeter.wssampler.PingFrameFilter guiclass="eu.luminis.jmeter.wssampler.PingFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.PingFrameFilter" testname="WebSocket Ping/Pong Frame Filter" enabled="true">
                <boolProp name="replyToPing">false</boolProp>
                <stringProp name="filterType">FilterAll</stringProp>
              </eu.luminis.jmeter.wssampler.PingFrameFilter>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Main HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;-${__threadNum}-${username}</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
                  </elementProp>
                  <elementProp name="Use-Cookie" elementType="Header">
                    <stringProp name="Header.name">Use-Cookie</stringProp>
                    <stringProp name="Header.value">true</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">3000</stringProp>
            </TestAction>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">10000</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${alarms_ws_connected}&quot;==&quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="Read Alarm WebSocket Sampler - ${__threadNum}--${__V(Thread_WS_Cookie2)}" enabled="true">
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server">${HOST}</stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path">/api/${api_ver}/dde/alarm?start_time__gte=${starttime}</stringProp>
              <boolProp name="binaryPayload">false</boolProp>
              <boolProp name="createNewConnection">false</boolProp>
              <boolProp name="optional">true</boolProp>
              <stringProp name="readTimeout">120000</stringProp>
              <stringProp name="connectTimeout">20000</stringProp>
              <stringProp name="dataType">Text</stringProp>
            </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);

//props.put(&quot;sessionValue2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionValueSid2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue2&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;));



//log.info(&quot;THE SESSION VALUE........&quot;+vars.get(&quot;cookie_value&quot;))

log.info(&quot;READ ALARMS SAMPLER....&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;));

//props.put(&quot;sessionCookieValue2&quot;, &quot;::&quot;+${COOKIE_}+props.get(&quot;sessionCookieValue1&quot;))


import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, ${COOKIE_}+props.get(&quot;sessionCookieValue1&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);

//System.out.println(&quot;Cookie value&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+${COOKIE_}+props.get(&quot;sessionValue1&quot;));

</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">SamplerJSONResult_errors</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;errors\\&quot;:(\[\]|\[.*\])</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">[]</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Alarms Read WebSocket PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//Alarms Read WebSocket PostProcessor

if (prev.getResponseCode().equals(&quot;500&quot;)) {
     vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;502&quot;)) {
     vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;503&quot;)) {
     vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseMessage().equals(&quot;Close&quot;)) {
     vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}


if (prev.getResponseCode().equals(&quot;Websocket error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
	     prev.setSuccessful(false);
	} else {
		vars.put(&quot;alarms_ws_connected&quot;,&quot;true&quot;);
	}
}
if (prev.getResponseCode().equals(&quot;Websocket I/O error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;)) {
	     prev.setSuccessful(false);
	} else {
		vars.put(&quot;alarms_ws_connected&quot;,&quot;true&quot;);
	}
	prev.setSuccessful(true);
	vars.put(&quot;alarms_ws_connected&quot;,&quot;true&quot;);
}

log.info( &quot;The response code for stats is given by&gt;&gt;&gt;&gt;&gt;&quot; + prev.getResponseCode());

if (prev.getResponseCode().equals(&quot;Sampler error&quot;)) {
//Response code: Sampler error
//Response message: Sampler configured for using existing connection, but there is no connection
		vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
		prev.setSuccessful(true);
}

if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
     prev.setSuccessful(true);
     vars.put(&quot;alarms_ws_connected&quot;,&quot;true&quot;);
}

var currTime = ${__time(/1000,)};
var startTime = Integer.parseInt(vars.get(&quot;alarms_start_time&quot;));
var startTimeAlarms = Integer.parseInt(vars.get(&quot;alarms_start_time1&quot;));



//Have the slot time 

log.info(&quot;TEST DURATION GIVEN AS&quot;+vars.get(&quot;TEST_DURATION&quot;));
log.info(&quot;CURRENT TIME&quot;+${__javaScript(${__time(,)} / 1000,)});
log.info(&quot;TIME GIVEN&quot;+(currTime - startTimeAlarms));

if( (currTime - startTime) &gt;= Integer.parseInt(vars.get(&quot;ping_pong_interval&quot;))) {
	log.info( &quot;ping_pong_interval period exceeded for alarms : &quot; + String.valueOf(currTime - startTime) );
	vars.put (&quot;run_alarms_ping_pong_sampler&quot;, &quot;true&quot;);
	//Reset Start Time to currTime
	vars.put(&quot;alarms_start_time&quot;, String.valueOf(currTime));
} else {
	vars.put (&quot;run_alarms_ping_pong_sampler&quot;, &quot;false&quot;);
}

//if ( vars.get(&quot;TEST_DURATION&quot;).equals(&quot;21600&quot;)){
//	log.info(&quot;INSIDE THE IF CONDITION FOR 6 HOURS.......&quot;);
//	for (int i=0; i&lt; = 24; i++ ){
//		//if ( (i % 2 == 0) || (i ==1)  ){
//			if ((currTime - startTimeAlarms) == 900 * i ){
//				vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;);
//			}
		//}
//	}
//} else {
//    log.info(&quot;INSIDE THE ELSW CONDITION FOR &lt; 6 HOURS.......&quot;);
//    vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;);
//}
//log.info(&quot;THE INITIAL COMMAND EXECUTION&quot;+vars.get(initial_command_execution));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor alarms main" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper;

def jsonSlurper = new JsonSlurper();
if(prev.getResponseCode().equals(&quot;200&quot;) ){
	def response = jsonSlurper.parseText(prev.getResponseDataAsString());
	def payload = jsonSlurper.parseText(response.payload);
	int record_count = Integer.parseInt(props.get(&quot;alarm_records_count_thread_&quot; + ${__threadNum}));
	record_count += 1;
	props.put(&quot;alarm_records_count_thread_&quot; + ${__threadNum}, String.valueOf(record_count));
}

//vars.put(&quot;alarms_ws_connected&quot;, &quot;false&quot;)

</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">props.put(&quot;sessionCookieValue&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;))

FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results123.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();


//props.put(&quot;sessionCookieValue&quot;, vars.get(&quot;Thread_WS_Cookie2&quot;))</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Main HTTP Header Manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Use-Cookie</stringProp>
                    <stringProp name="Header.value">true</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">${Cookie_sid}</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var currTime1 = ${__time(/1000,)};
var startTimeAlarms1 = Integer.parseInt(vars.get(&quot;alarms_start_time1&quot;));
log.info(&quot;TIME GIVEN AFTER&quot;+(currTime - startTimeAlarms1));

if( (currTime1 - startTimeAlarms1) &gt;= Integer.parseInt(vars.get(&quot;TEST_DURATION&quot;))) {
    vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//props.put(&quot;sessionCookieValue&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;))

//FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results123.csv&quot;,true);
//BufferedWriter out = new BufferedWriter(fstream);
//out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;));
//out.write(System.getProperty(&quot;line.separator&quot;));
//out.close();
//fstream.close();

var currTimeNew = ${__time(/1000,)};
var startTimeNew = Integer.parseInt(vars.get(&quot;alarms_start_time1&quot;));

log.info(&quot;The current time value is: ${starttime_value}&quot;);

//props.put(&quot;sessionCookieValue&quot;, vars.get(&quot;Thread_WS_Cookie2&quot;))

//if ( vars.get(&quot;test_duration_1&quot;).equals(&quot;300&quot;)){
log.info(&quot;INSIDE THE IF CONDITION FOR 6 HOURS.......&quot;);
//for (int i=0; i&lt; = 24; i++ ){
//if ( (i % 2 == 0) || (i ==1)  ){

//var test_duration = ${TEST_DURATION} - 100
//var timePresent = Integer.parseInt(vars.get(&quot;TEST_DURATION&quot;)) - 100

log.info(&quot;The test duration=============&quot;+${TEST_DURATION});
log.info( &quot;In current new and start new : &quot; + String.valueOf(currTimeNew - startTimeNew));

if ((currTimeNew - startTimeNew) &gt;= ${TEST_DURATION} - 600){
	     log.info(&quot;INSIDE THE IF CONDITION FOR TIME COMPARISION....&quot;);
		vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;);
		vars.put(&quot;end_test&quot;, &quot;true&quot;);
	}
		//}

//} else {
//    log.info(&quot;INSIDE THE ELSW CONDITION FOR &lt; 6 HOURS.......&quot;);
//    vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;);
//}
log.info(&quot;THE INITIAL COMMAND EXECUTION&quot;+vars.get(initial_command_execution));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
                <intProp name="OnError.action">0</intProp>
              </ResultAction>
              <hashTree/>
            </hashTree>
            <eu.luminis.jmeter.wssampler.CloseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.CloseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.CloseWebSocketSampler" testname="WebSocket Close" enabled="false">
              <stringProp name="statusCode">1000</stringProp>
              <stringProp name="readTimeout">6000</stringProp>
            </eu.luminis.jmeter.wssampler.CloseWebSocketSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Post to have a logout-Alarms- ${__threadNum}" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;session_id&quot; : &quot;${__P(sessionPostValue2)}&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port">80</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/1.0/core/logout</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">120000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">120000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);

//props.put(&quot;sessionValue2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionValueSid2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue2&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;));



//log.info(&quot;THE SESSION VALUE........&quot;+vars.get(&quot;cookie_value&quot;))

//props.put(&quot;sessionCookieValue2&quot;, &quot;::&quot;+${COOKIE_}+props.get(&quot;sessionCookieValue1&quot;))


import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue2&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);

//System.out.println(&quot;Cookie value&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+${COOKIE_}+props.get(&quot;sessionValue1&quot;));

//vars.put(&quot;alarms_ws_connected&quot;, &quot;false&quot;)</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Use-Cookie</stringProp>
                    <stringProp name="Header.value">false</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">${__P(sessionPostSidValue2)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">if (prev.getResponseCode().equals(&quot;502&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;500&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(true);
}
if (prev.getResponseCode().equals(&quot;403&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(true);
}

vars.put(&quot;alarms_ws_connected&quot;, &quot;false&quot;)</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
              <intProp name="ActionProcessor.action">3</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">3000</stringProp>
            </TestAction>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
              <stringProp name="BeanShellSampler.query">
var currTime =  ${__time(/1000,)};
String epochSecString = String.valueOf(currTime)
Long epoch = parseLong( epochSecString );
java.util.Date endtimeDate = new java.util.Date( epoch * 1000 );
log.info(&quot;endtimeDate = &quot; + endtimeDate);

java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat(&quot;HH:mm&quot;);
sHHmm = formatter.format(endtimeDate);
log.info(&quot;endtime HH:mm = &quot; + sHHmm);
vars.put(&quot;vEndTimeHHmm&quot;, sHHmm);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">3000</stringProp>
            </TestAction>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
              <stringProp name="IfController.condition">&quot;${initial_command_execution}&quot;==&quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="filename">C:/Users/akarthik/results12.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">${__threadNum}, ${__P(Therad_WS_Cookie2)}</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.group</stringProp>
              </CSVDataSet>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">60000</stringProp>
              </TestAction>
              <hashTree/>
              <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
                <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
              </CriticalSectionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Post to have a logout-Alarms- ${__threadNum}-${__P(sessionPostValue2)}" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;session_id&quot; : &quot;${__P(sessionPostValue2)}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port">80</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/2.0/config/logout</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout">120000</stringProp>
                  <stringProp name="HTTPSampler.response_timeout">120000</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);

//props.put(&quot;sessionValue2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionValueSid2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue2&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;));



//log.info(&quot;THE SESSION VALUE........&quot;+vars.get(&quot;cookie_value&quot;))

//props.put(&quot;sessionCookieValue2&quot;, &quot;::&quot;+${COOKIE_}+props.get(&quot;sessionCookieValue1&quot;))


import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue2&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);

//System.out.println(&quot;Cookie value&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+${COOKIE_}+props.get(&quot;sessionValue1&quot;));

//vars.put(&quot;alarms_ws_connected&quot;, &quot;false&quot;)</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Use-Cookie</stringProp>
                        <stringProp name="Header.value">true</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">if (prev.getResponseCode().equals(&quot;502&quot;)) {
     vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;500&quot;) || prev.getResponseCode().equals(&quot;204&quot;)) {
     //vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
     vars.put(&quot;end_test&quot;, &quot;true&quot;);
     prev.setSuccessful(true);
}
if (prev.getResponseCode().equals(&quot;403&quot;)) {
     vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(true);
}

vars.put(&quot;end_test&quot;, &quot;true&quot;);
//vars.put(&quot;alarms_ws_connected&quot;, &quot;false&quot;)</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="52469">500</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message">200</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                    <collectionProp name="CookieManager.cookies"/>
                    <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                    <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
                    <stringProp name="CookieManager.policy">standard-strict</stringProp>
                  </CookieManager>
                  <hashTree/>
                  <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
                    <intProp name="groupSize">1</intProp>
                    <longProp name="timeoutInMs">60000</longProp>
                  </SyncTimer>
                  <hashTree/>
                  <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="false">
                    <intProp name="calcMode">4</intProp>
                    <doubleProp>
                      <name>throughput</name>
                      <value>10.0</value>
                      <savedValue>0.0</savedValue>
                    </doubleProp>
                  </ConstantThroughputTimer>
                  <hashTree/>
                  <PoissonRandomTimer guiclass="PoissonRandomTimerGui" testclass="PoissonRandomTimer" testname="Poisson Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">2000</stringProp>
                    <stringProp name="RandomTimer.range">100</stringProp>
                  </PoissonRandomTimer>
                  <hashTree/>
                </hashTree>
                <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${end_test}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                <intProp name="ActionProcessor.action">2</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">2000</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Run PingPong" enabled="true">
            <stringProp name="IfController.condition">&quot;${run_alarms_ping_pong_sampler}&quot;==&quot;true&quot; || &quot;${enable_ping_pong}&quot;==&quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <eu.luminis.jmeter.wssampler.PingPongSampler guiclass="eu.luminis.jmeter.wssampler.PingPongSamplerGui" testclass="eu.luminis.jmeter.wssampler.PingPongSampler" testname="WebSocket Ping/Pong for Alarms-${__V(Thread_WS_Cookie2)}" enabled="true">
              <stringProp name="type">Pong</stringProp>
              <stringProp name="readTimeout">100000</stringProp>
            </eu.luminis.jmeter.wssampler.PingPongSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//Alarms Read WebSocket PostProcessor

if (prev.getResponseCode().equals(&quot;500&quot;)) {
     vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;502&quot;)) {
     vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;503&quot;)) {
     vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseMessage().equals(&quot;Close&quot;)) {
     vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseMessage().equals(&quot;200&quot;)) {
     vars.put(&quot;alarms_ws_connected&quot;,&quot;true&quot;);
     prev.setSuccessful(true);
}

if (prev.getResponseCode().equals(&quot;Websocket error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
	     prev.setSuccessful(false);
	} else {
		vars.put(&quot;alarms_ws_connected&quot;,&quot;true&quot;);
	}
}
if (prev.getResponseCode().equals(&quot;Websocket I/O error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;)) {
	     prev.setSuccessful(true);
	} else {
		vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
	}
	prev.setSuccessful(true);
	//vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
}

log.info( &quot;The response code for status is given by&gt;&gt;&gt;&gt;&gt;&quot; + prev.getResponseCode());

if (prev.getResponseCode().equals(&quot;Sampler error&quot;)) {
//Response code: Sampler error
//Response message: Sampler configured for using existing connection, but there is no connection
		//vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
		prev.setSuccessful(true);
		vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
}

if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
     prev.setSuccessful(true);
     vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellListener guiclass="TestBeanGUI" testclass="BeanShellListener" testname="Alarms WebSocket BeanShell Listener - ${__threadNum}" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">/* WS - Status - Calculate across all threads */

//Start of new PostProcesser
String res=sampleResult.getResponseCode();
String testType = &quot;ws_alarms_requests&quot;;
Map requests = new HashMap();
Long sys_failure_count=0;
Long failure_count=0;
Long requestSum = 0;
Long timeSum = 0;
Boolean Failure = false;

if (res.equals(&quot;101&quot;)) {
	if (!sampleResult.getResponseMessage().equals(&quot;Switching Protocols&quot;)) {
		sys_failure_count++;		
	}
} else if (!res.equals(&quot;200&quot;)) {
	//Ignore if it is a regular read tmieout...
	if (
		!sampleResult.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;) &amp;&amp; 
		!sampleResult.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;) &amp;&amp;
		!sampleResult.getResponseMessage().equals(&quot;Read timeout, no response received.&quot;)
	   ) 
	{
		sys_failure_count++;		
	}
	//#TODOwhat about f (sampleResult.getResponseMessage().equals(&quot;Received: Close frame with status code 1000 and close reason \&apos;null\&apos;&quot;)) {
} else {

	String errors = vars.get(&quot;SamplerJSONResult_errors&quot;);
	//log.info(&quot;errors is &quot; + errors);

	if (errors != null &amp;&amp; !errors.equals(&quot;[]&quot;)) 
	{
		//Failure
		//log.error(&quot;WS Status - You had an error: &quot; + errors);
	     //sampleResult.setResponseMessage(errors);
		//Failure = true;
	     //sampleResult.setSuccessful(false);
	}
     if (Failure) {
		failure_count++;
     }
}

if ( res.equals(&quot;200&quot;)) // || res.equals(&quot;101&quot;) ) 
{
	timeSum += sampleResult.getTime();
	requestSum++;
	Long average = timeSum / requestSum;
	bsh.shared.ws_status_avResp = average;
}

String var_name = &quot;alarms_records_count_thread_&quot; + ${__threadNum} ; 
props.put(var_name, &quot;0&quot;);

//if (prev.getResponseCode().equals(&quot;403&quot;)) {
//     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
//     prev.setSuccessful(true);
//}
//String[] words = &quot;${Thread_WS_Cookie_${__threadNum}}&quot;.split(&quot;=&quot;);
//String sid = &quot;&quot;;
//String cookie_val = words[1];
//log.info(&quot;COOKIE VAL TEST&gt;&gt;&gt;&gt;&gt;&quot;+cookie_val);
//for (int i = 0; i &lt; words.length; i++) {
//  log.info(words[i]);
//  sid = &quot;sid=&quot;+ words[1];
//  log.info(&quot;The sid value is&quot;+sid);   
//}
//String var_name_cookie = sid;
//props.put(varNameCookie, sid);
//props.put(cookieValue, cookie_val);


requests.put(&quot;requestSum&quot;,String.valueOf(requestSum));
requests{&quot;timeSum&quot;}=String.valueOf(timeSum);
requests{&quot;failureSum&quot;}=String.valueOf(failure_count);
requests{&quot;sysFailureSum&quot;}=String.valueOf(sys_failure_count);
props.put(testType, requests);</stringProp>
        </BeanShellListener>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.PingFrameFilter guiclass="eu.luminis.jmeter.wssampler.PingFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.PingFrameFilter" testname="WebSocket Ping/Pong Frame Filter" enabled="true">
          <boolProp name="replyToPing">true</boolProp>
          <stringProp name="filterType">FilterAll</stringProp>
        </eu.luminis.jmeter.wssampler.PingFrameFilter>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.TextFrameFilter guiclass="eu.luminis.jmeter.wssampler.TextFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.TextFrameFilter" testname="WebSocket Text Frame Filter" enabled="false">
          <stringProp name="comparisonType">Contains</stringProp>
          <stringProp name="matchValue">Sampler error: unexpected frame type (close)</stringProp>
        </eu.luminis.jmeter.wssampler.TextFrameFilter>
        <hashTree/>
        <kg.apc.jmeter.modifiers.FifoPutPostProcessor guiclass="kg.apc.jmeter.modifiers.FifoPutPostProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPutPostProcessor" testname="jp@gc - Inter-Thread Communication PostProcessor" enabled="false">
          <stringProp name="Value">${sid1}</stringProp>
          <stringProp name="FifoName">SYNC_FIFO</stringProp>
        </kg.apc.jmeter.modifiers.FifoPutPostProcessor>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">true</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="jp@gc - Ultimate Thread Group- Events-New" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="882897646">
            <stringProp name="478152815">${__evalVar(NUM_USERS)}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="1660">40</stringProp>
            <stringProp name="-1857560941">${TEST_DURATION}</stringProp>
            <stringProp name="53430">600</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-main" enabled="true">
            <stringProp name="IfController.condition">&quot;${events_ws_connected}&quot;==&quot;false&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var startTimeEvents = ${__time(/1000,)};
vars.put(&quot;events_start_time1&quot;, String.valueOf(startTimeEvents));

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">./${CREDENTIALS_CSV}</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">username,password</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="Open Event WebSocket Sampler - ${__threadNum}" enabled="true">
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server">${HOST}</stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path">/api/${api_ver}/dde/event?timestamp__gte=${events_start_time1}&amp;severity=CRITICAL&amp;object_id__in=${all_terminal_obj_ids}&amp;batch=true</stringProp>
              <stringProp name="readTimeout">120000</stringProp>
              <stringProp name="connectTimeout">100000</stringProp>
            </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();

//Cookie cookie = new Cookie(&quot;Cookie&quot;,props.get(&quot;sid&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0)
//manager.add(cookie);

import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;,props.get(&quot;sid1&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0);
manager.add(cookie);

//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();
//manager.add(props.get(&quot;sid&quot;));
//Cookie cookie1 = new Cookie(&quot;vwo_logged_in&quot;,props.get(&quot;MyCookie1&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie1);
//Cookie cookie2 = new Cookie(&quot;vwola&quot;,props.get(&quot;MyCookie2&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie2);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();

Cookie cookie = new Cookie(&quot;sid&quot;,props.get(&quot;sid&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0)
manager.add(cookie);
//Cookie cookie1 = new Cookie(&quot;vwo_logged_in&quot;,props.get(&quot;MyCookie1&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie1);
//Cookie cookie2 = new Cookie(&quot;vwola&quot;,props.get(&quot;MyCookie2&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie2);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <kg.apc.jmeter.modifiers.FifoPopPreProcessor guiclass="kg.apc.jmeter.modifiers.FifoPopPreProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPopPreProcessor" testname="jp@gc - Inter-Thread Communication PreProcessor" enabled="false">
                <stringProp name="Timeout"></stringProp>
                <stringProp name="Variable">sid2</stringProp>
                <stringProp name="FifoName">SYNC_FIFO</stringProp>
              </kg.apc.jmeter.modifiers.FifoPopPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Events Open WebSocket PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">

if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
     prev.setSuccessful(false);
     vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
}
if (prev.getResponseCode().equals(&quot;101&quot;)) {
     vars.put(&quot;events_ws_connected&quot;,&quot;true&quot;);
}
if (prev.getResponseMessage().equals(&quot;Close&quot;)) {
     vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
//if (prev.getResponseMessage().equals(&quot;Sampler configured for using existing connection, but there is no connection&quot;)){
//	vars.put(&quot;events_ws_connected&quot;,&quot;true&quot;);
//	prev.setSuccessful(true);
//}
if (${DEBUG_FLAG} == true){
	log.info(&quot;GET RESPONSE MESSAGE&gt;&gt;&gt;&gt;&quot;+prev.getResponseMessage());
}
var start_time =  ${__time(/1000,)};
vars.put(&quot;events_start_time&quot;, String.valueOf(start_time));
vars.put(&quot;run_events_ping_pong_sampler&quot;, &quot;false&quot;);

String var_name = &quot;event_records_count_thread_&quot; + ${__threadNum} ; 
props.put(var_name, &quot;0&quot;);

props.put(epoch_time, ${epoch_time});


</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">

//props.put(&quot;sessionValue1&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionValueSid1&quot;, &quot;sid=::&quot;+ vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionPostValue1&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;cookiepresent&quot;, ${COOKIE_sid});

//String details = vars.get(&quot;cookie_value&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
//System.out.println(&quot;The session post value&quot;+sessionPostValue);

//log.info(&quot;Cookie value&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+${COOKIE_}+props.get(&quot;sessionValue1&quot;));

import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy;
HTTPSamplerProxy sampler = ctx.getCurrentSampler();

import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, vars.get(&quot;sessionPostValue1&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);

//props.put(&quot;sessionCookiePost&quot;, ${Cookie_}+&quot;::&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;))

//Cookie cookie1 = new Cookie(&quot;SERVERID&quot;, serv1, &quot;${HOST}&quot;, &quot;/&quot;, false, 0)
//manager.add(cookie1)

</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <kg.apc.jmeter.modifiers.FifoPopPreProcessor guiclass="kg.apc.jmeter.modifiers.FifoPopPreProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPopPreProcessor" testname="jp@gc - Inter-Thread Communication PreProcessor" enabled="false">
                <stringProp name="Timeout"></stringProp>
                <stringProp name="Variable">sid1</stringProp>
                <stringProp name="FifoName">SYNC_FIFO</stringProp>
              </kg.apc.jmeter.modifiers.FifoPopPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">props.put(&quot;SID&quot;, vars.get(&quot;sid1&quot;));



FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results12.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2086234248">User&apos;s session does not match the value of session_id passed to the web service</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">No Response</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get Config - Global AUTH cookie" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
CookieManager manager = ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">SamplerJSONResult_errors</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;errors\\&quot;:(\[\]|\[.*\])</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">[]</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Cookie" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">Thread_WS_Cookie3</stringProp>
                <stringProp name="RegexExtractor.regex">cookie: sid=::([A-Za-z0-9].*::[A-Za-z0-9].*?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">if (${DEBUG_FLAG} == true){
	log.info(&quot;The ALARMS NEW COOKIE IS&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+vars.get(&quot;Thread_WS_Cookie3&quot;));
}
if ( vars.get(&quot;Thread_WS_Cookie3&quot;).length == 0){
	vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;)
}

props.put(&quot;sessionValue3&quot;, vars.get(&quot;Thread_WS_Cookie3&quot;));
props.put(&quot;sessionValueSid3&quot;, vars.get(&quot;Thread_WS_Cookie3&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue3&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie3&quot;));
props.put(&quot;sessionPostSidValue3&quot;, &quot;sid=::&quot;+vars.get(&quot;Thread_WS_Cookie3&quot;));

//props.put(&quot;sessionCookieValue1&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;))



import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue3&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);


FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results123.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie3&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Main HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;-${__threadNum}-${username}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Use-Cookie</stringProp>
                    <stringProp name="Header.value">true</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">3000</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller " enabled="true">
            <stringProp name="IfController.condition">&quot;${events_ws_connected}&quot;==&quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="Read Event WebSocket Sampler - ${__threadNum}-${__V(Thread_WS_Cookie3)}" enabled="true">
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server">${HOST}</stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path">/api/${api_ver}/dde/event?timestamp__gte=1587308888&amp;severity=CRITICAL</stringProp>
              <boolProp name="binaryPayload">false</boolProp>
              <boolProp name="createNewConnection">false</boolProp>
              <boolProp name="optional">true</boolProp>
              <stringProp name="readTimeout">120000</stringProp>
              <stringProp name="connectTimeout">100000</stringProp>
              <stringProp name="dataType">Text</stringProp>
            </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);

//props.put(&quot;sessionValue2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionValueSid2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue3&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie3&quot;));



//log.info(&quot;THE SESSION VALUE........&quot;+vars.get(&quot;cookie_value&quot;))
if (${DEBUG_FLAG} == true){
	log.info(&quot;READ ALARMS SAMPLER....&quot;+vars.get(&quot;Thread_WS_Cookie3&quot;));
}
//props.put(&quot;sessionCookieValue2&quot;, &quot;::&quot;+${COOKIE_}+props.get(&quot;sessionCookieValue1&quot;))


import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, ${COOKIE_}+props.get(&quot;sessionCookieValue3&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);

//System.out.println(&quot;Cookie value&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+${COOKIE_}+props.get(&quot;sessionValue1&quot;));

</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">SamplerJSONResult_errors</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;errors\\&quot;:(\[\]|\[.*\])</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">[]</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Events Read WebSocket PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//Alarms Read WebSocket PostProcessor

if (prev.getResponseCode().equals(&quot;500&quot;)) {
     vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;502&quot;)) {
     vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;503&quot;)) {
     vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseMessage().equals(&quot;Close&quot;)) {
     vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}


if (prev.getResponseCode().equals(&quot;Websocket error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
	     prev.setSuccessful(false);
	} else {
		vars.put(&quot;events_ws_connected&quot;,&quot;true&quot;);
	}
}
if (prev.getResponseCode().equals(&quot;Websocket I/O error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;)) {
	     prev.setSuccessful(false);
	} else {
		vars.put(&quot;events_ws_connected&quot;,&quot;true&quot;);
	}
	prev.setSuccessful(true);
	vars.put(&quot;events_ws_connected&quot;,&quot;true&quot;);
}

log.info( &quot;The response code for stats is given by&gt;&gt;&gt;&gt;&gt;&quot; + prev.getResponseCode());

if (prev.getResponseCode().equals(&quot;Sampler error&quot;)) {
//Response code: Sampler error
//Response message: Sampler configured for using existing connection, but there is no connection
		vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
		prev.setSuccessful(true);
}

if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
     prev.setSuccessful(true);
     vars.put(&quot;events_ws_connected&quot;,&quot;true&quot;);
}

var currTime = ${__time(/1000,)};
var startTime = Integer.parseInt(vars.get(&quot;events_start_time&quot;));
var startTimeEvents = Integer.parseInt(vars.get(&quot;events_start_time1&quot;));



//Have the slot time 

log.info(&quot;TEST DURATION GIVEN AS&quot;+vars.get(&quot;TEST_DURATION&quot;));
log.info(&quot;CURRENT TIME&quot;+${__javaScript(${__time(,)} / 1000,)});
log.info(&quot;TIME GIVEN&quot;+(currTime - startTimeEvents));

if( (currTime - startTime) &gt;= Integer.parseInt(vars.get(&quot;ping_pong_interval&quot;))) {
	log.info( &quot;ping_pong_interval period exceeded for events : &quot; + String.valueOf(currTime - startTime) );
	vars.put (&quot;run_events_ping_pong_sampler&quot;, &quot;true&quot;);
	//Reset Start Time to currTime
	vars.put(&quot;events_start_time&quot;, String.valueOf(currTime));
} else {
	vars.put (&quot;run_events_ping_pong_sampler&quot;, &quot;false&quot;);
}

//if ( vars.get(&quot;TEST_DURATION&quot;).equals(&quot;21600&quot;)){
//	log.info(&quot;INSIDE THE IF CONDITION FOR 6 HOURS.......&quot;);
//	for (int i=0; i&lt; = 24; i++ ){
//		//if ( (i % 2 == 0) || (i ==1)  ){
//			if ((currTime - startTimeAlarms) == 900 * i ){
//				vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;);
//			}
		//}
//	}
//} else {
//    log.info(&quot;INSIDE THE ELSW CONDITION FOR &lt; 6 HOURS.......&quot;);
//    vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;);
//}
//log.info(&quot;THE INITIAL COMMAND EXECUTION&quot;+vars.get(initial_command_execution));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor events main" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper;

def jsonSlurper = new JsonSlurper();
if(prev.getResponseCode().equals(&quot;200&quot;) ){
	def response = jsonSlurper.parseText(prev.getResponseDataAsString());
	def payload = jsonSlurper.parseText(response.payload);
	int record_count = Integer.parseInt(props.get(&quot;event_records_count_thread_&quot; + ${__threadNum}));
	record_count += 1;
	props.put(&quot;event_records_count_thread_&quot; + ${__threadNum}, String.valueOf(record_count));
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">SamplerJSONResult_errors</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;errors\\&quot;:(\[\]|\[.*\])</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">[]</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor alarms main" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper;

def jsonSlurper = new JsonSlurper();
if(prev.getResponseCode().equals(&quot;200&quot;) ){
	def response = jsonSlurper.parseText(prev.getResponseDataAsString());
	def payload = jsonSlurper.parseText(response.payload);
	int record_count = Integer.parseInt(props.get(&quot;alarm_records_count_thread_&quot; + ${__threadNum}));
	record_count += 1;
	props.put(&quot;alarm_records_count_thread_&quot; + ${__threadNum}, String.valueOf(record_count));
}


</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">props.put(&quot;sessionCookieValue&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie3&quot;))

FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results123.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie3&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();


//props.put(&quot;sessionCookieValue&quot;, vars.get(&quot;Thread_WS_Cookie2&quot;))</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Main HTTP Header Manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;</stringProp>
                  </elementProp>
                  <elementProp name="Use-Cookie" elementType="Header">
                    <stringProp name="Header.name">Use-Cookie</stringProp>
                    <stringProp name="Header.value">true</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Cookie" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">Thread_WS_Cookie3a</stringProp>
                <stringProp name="RegexExtractor.regex">Set-Cookie: sid=::([A-Za-z0-9].*::[A-Za-z0-9].*);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">if (${DEBUG_FLAG} == true){
	log.info(&quot;The ALARMS NEW COOKIE IS&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+vars.get(&quot;Thread_WS_Cookie3&quot;));
}
if ( vars.get(&quot;Thread_WS_Cookie3&quot;).length == 0){
	vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;)
}

props.put(&quot;sessionValue3a&quot;, vars.get(&quot;Thread_WS_Cookie3a&quot;));
props.put(&quot;sessionValueSid3a&quot;, vars.get(&quot;Thread_WS_Cookie3a&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue3a&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie3a&quot;));
props.put(&quot;sessionPostSidValue3a&quot;, &quot;sid=::&quot;+vars.get(&quot;Thread_WS_Cookie3a&quot;));

//props.put(&quot;sessionCookieValue1&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;))



import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue3&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);


FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results123.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie3&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//props.put(&quot;sessionCookieValue&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;))

//FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results123.csv&quot;,true);
//BufferedWriter out = new BufferedWriter(fstream);
//out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;));
//out.write(System.getProperty(&quot;line.separator&quot;));
//out.close();
//fstream.close();

var currTimeNew = ${__time(/1000,)};
var startTimeNew = Integer.parseInt(vars.get(&quot;events_start_time1&quot;));

log.info(&quot;The current time value is: ${starttime_value}&quot;);

//props.put(&quot;sessionCookieValue&quot;, vars.get(&quot;Thread_WS_Cookie2&quot;))

//if ( vars.get(&quot;test_duration_1&quot;).equals(&quot;300&quot;)){
log.info(&quot;INSIDE THE IF CONDITION FOR 6 HOURS.......&quot;);
//for (int i=0; i&lt; = 24; i++ ){
//if ( (i % 2 == 0) || (i ==1)  ){

//var test_duration = ${TEST_DURATION} - 100
//var timePresent = Integer.parseInt(vars.get(&quot;TEST_DURATION&quot;)) - 100

log.info(&quot;The test duration=============&quot;+${TEST_DURATION});
log.info( &quot;In current new and start new : &quot; + String.valueOf(currTimeNew - startTimeNew));

if ((currTimeNew - startTimeNew) &gt;= ${TEST_DURATION} - 600){
	     log.info(&quot;INSIDE THE IF CONDITION FOR TIME COMPARISION....&quot;);
		vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;);
		vars.put(&quot;end_test&quot;, &quot;true&quot;);
	}
		//}

//} else {
//    log.info(&quot;INSIDE THE ELSW CONDITION FOR &lt; 6 HOURS.......&quot;);
//    vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;);
//}
log.info(&quot;THE INITIAL COMMAND EXECUTION&quot;+vars.get(initial_command_execution));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="WebSocket request-response Sampler" enabled="false">
              <boolProp name="createNewConnection">false</boolProp>
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server">${HOST}</stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path">/api/${api_ver}/dde/event?timestamp__gte=${starttime}&amp;severity=CRITICAL&amp;batch=true</stringProp>
              <stringProp name="connectTimeout">20000</stringProp>
              <boolProp name="binaryPayload">false</boolProp>
              <stringProp name="requestData"></stringProp>
              <stringProp name="readTimeout">6000</stringProp>
              <boolProp name="loadDataFromFile">false</boolProp>
              <stringProp name="dataFile"></stringProp>
            </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
            <hashTree/>
            <eu.luminis.jmeter.wssampler.CloseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.CloseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.CloseWebSocketSampler" testname="WebSocket Close" enabled="false">
              <stringProp name="statusCode">1000</stringProp>
              <stringProp name="readTimeout">6000</stringProp>
            </eu.luminis.jmeter.wssampler.CloseWebSocketSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Post to have a logout-Events-${__threadNum}" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;session_id&quot; : &quot;${__P(sessionPostValue3)}&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port">80</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/1.0/core/logout</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">120000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">120000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);

//props.put(&quot;sessionValue2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionValueSid2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue3&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie3&quot;));



//log.info(&quot;THE SESSION VALUE........&quot;+vars.get(&quot;cookie_value&quot;))
if (${DEBUG_FLAG} == true){
	log.info(&quot;EVENTS COOKIE VALUE..........................&quot;+vars.get(&quot;Thread_WS_Cookie3&quot;));
}
//props.put(&quot;sessionCookieValue2&quot;, &quot;::&quot;+${COOKIE_}+props.get(&quot;sessionCookieValue1&quot;))


import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue3&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);

//System.out.println(&quot;Cookie value&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+${COOKIE_}+props.get(&quot;sessionValue1&quot;));

//vars.put(&quot;events_ws_connected&quot;, &quot;false&quot;)</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Use-Cookie</stringProp>
                    <stringProp name="Header.value">false</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">${__P(sessionPostSidValue2)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">if (prev.getResponseCode().equals(&quot;502&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;500&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(true);
}

vars.put(&quot;events_ws_connected&quot;, &quot;false&quot;)</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">10000</stringProp>
            </TestAction>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
              <stringProp name="IfController.condition">&quot;${initial_command_execution}&quot;==&quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                <stringProp name="filename">C:/Users/akarthik/results123.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">cookie, cookie_value</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.thread</stringProp>
              </CSVDataSet>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">10000</stringProp>
              </TestAction>
              <hashTree/>
              <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
                <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
              </CriticalSectionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Post to have a logout-Events-${__threadNum}-${__P(sessionPostValue3)}" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;session_id&quot; : &quot;${__P(sessionPostValue3)}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port">80</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/2.0/config/logout</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout">120000</stringProp>
                  <stringProp name="HTTPSampler.response_timeout">120000</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);

//props.put(&quot;sessionValue2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionValueSid2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue3&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie3&quot;));



//log.info(&quot;THE SESSION VALUE........&quot;+vars.get(&quot;cookie_value&quot;))
log.info(&quot;.&quot;+vars.get(&quot;Thread_WS_Cookie3&quot;));

//props.put(&quot;sessionCookieValue2&quot;, &quot;::&quot;+${COOKIE_}+props.get(&quot;sessionCookieValue1&quot;))


import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue3&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);

//System.out.println(&quot;Cookie value&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+${COOKIE_}+props.get(&quot;sessionValue1&quot;));

//vars.put(&quot;status_ws_connected&quot;, &quot;false&quot;)</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Use-Cookie</stringProp>
                        <stringProp name="Header.value">true</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">if (prev.getResponseCode().equals(&quot;502&quot;)) {
     vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;500&quot;) || prev.getResponseCode().equals(&quot;204&quot;)) {
     //vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
     vars.put(&quot;end_test&quot;, &quot;true&quot;);
     prev.setSuccessful(true);
}

//vars.put(&quot;end_test&quot;, &quot;true&quot;);
//vars.put(&quot;events_ws_connected&quot;, &quot;false&quot;)</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="52469">500</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message">200</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                    <collectionProp name="CookieManager.cookies"/>
                    <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                    <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
                    <stringProp name="CookieManager.policy">standard-strict</stringProp>
                  </CookieManager>
                  <hashTree/>
                  <PoissonRandomTimer guiclass="PoissonRandomTimerGui" testclass="PoissonRandomTimer" testname="Poisson Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">2000</stringProp>
                    <stringProp name="RandomTimer.range">100</stringProp>
                  </PoissonRandomTimer>
                  <hashTree/>
                </hashTree>
                <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="false"/>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Run PingPong" enabled="true">
              <stringProp name="IfController.condition">&quot;${run_events_ping_pong_sampler}&quot;==&quot;true&quot; || &quot;${enable_ping_pong}&quot;==&quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <eu.luminis.jmeter.wssampler.PingPongSampler guiclass="eu.luminis.jmeter.wssampler.PingPongSamplerGui" testclass="eu.luminis.jmeter.wssampler.PingPongSampler" testname="WebSocket Ping/Pong for Events-${__V(Thread_WS_Cookie3)}" enabled="true">
                <stringProp name="type">Pong</stringProp>
                <stringProp name="readTimeout">100000</stringProp>
              </eu.luminis.jmeter.wssampler.PingPongSampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">//Alarms Read WebSocket PostProcessor

if (prev.getResponseCode().equals(&quot;500&quot;)) {
     vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;502&quot;)) {
     vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;503&quot;)) {
     vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseMessage().equals(&quot;Close&quot;)) {
     vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseMessage().equals(&quot;200&quot;)) {
     vars.put(&quot;events_ws_connected&quot;,&quot;true&quot;);
     prev.setSuccessful(true);
}

if (prev.getResponseCode().equals(&quot;Websocket error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
	     prev.setSuccessful(false);
	} else {
		vars.put(&quot;events_ws_connected&quot;,&quot;true&quot;);
	}
}
if (prev.getResponseCode().equals(&quot;Websocket I/O error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;)) {
	     prev.setSuccessful(true);
	} else {
		vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
	}
	prev.setSuccessful(true);
	//vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
}

log.info( &quot;The response code for status is given by&gt;&gt;&gt;&gt;&gt;&quot; + prev.getResponseCode());

if (prev.getResponseCode().equals(&quot;Sampler error&quot;)) {
//Response code: Sampler error
//Response message: Sampler configured for using existing connection, but there is no connection
		//vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
		prev.setSuccessful(true);
		vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
}

if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
     prev.setSuccessful(true);
     vars.put(&quot;events_ws_connected&quot;,&quot;false&quot;);
}</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${end_test}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                <intProp name="ActionProcessor.action">2</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">2000</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
          <eu.luminis.jmeter.wssampler.CloseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.CloseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.CloseWebSocketSampler" testname="WebSocket Close" enabled="false">
            <stringProp name="statusCode">1000</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
          </eu.luminis.jmeter.wssampler.CloseWebSocketSampler>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.TextFrameFilter guiclass="eu.luminis.jmeter.wssampler.TextFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.TextFrameFilter" testname="WebSocket Text Frame Filter" enabled="true">
            <stringProp name="comparisonType">Contains</stringProp>
            <stringProp name="matchValue">User session</stringProp>
          </eu.luminis.jmeter.wssampler.TextFrameFilter>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
          <stringProp name="IfController.condition">&quot;${run_once}&quot; == &quot;false&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="false"/>
          <hashTree/>
        </hashTree>
        <BeanShellListener guiclass="TestBeanGUI" testclass="BeanShellListener" testname="Events WebSocket BeanShell Listener - ${__threadNum}" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">/* WS - Status - Calculate across all threads */

//Start of new PostProcesser
String res=sampleResult.getResponseCode();
String testType = &quot;ws_events_requests&quot;;
Map requests = new HashMap();
Long sys_failure_count=0;
Long failure_count=0;
Long requestSum = 0;
Long timeSum = 0;
Boolean Failure = false;

if (res.equals(&quot;101&quot;)) {
	if (!sampleResult.getResponseMessage().equals(&quot;Switching Protocols&quot;)) {
		sys_failure_count++;		
	}
} else if (!res.equals(&quot;200&quot;)) {
	//Ignore if it is a regular read tmieout...
	if (
		!sampleResult.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;) &amp;&amp; 
		!sampleResult.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;) &amp;&amp;
		!sampleResult.getResponseMessage().equals(&quot;Read timeout, no response received.&quot;)
	   ) 
	{
		sys_failure_count++;		
	}
	
	//#TODOwhat about f (sampleResult.getResponseMessage().equals(&quot;Received: Close frame with status code 1000 and close reason \&apos;null\&apos;&quot;)) {
} else {

	String errors = vars.get(&quot;SamplerJSONResult_errors&quot;);

	if (errors != null &amp;&amp; !errors.equals(&quot;[]&quot;)) 
	{
		//Failure
		//log.error(&quot;WS Status - You had an error: &quot; + errors);
	     //sampleResult.setResponseMessage(errors);
		//Failure = true;
	     //sampleResult.setSuccessful(false);
	}
     if (Failure) {
		failure_count++;
     }
}
if ( sampleResult.getResponseMessage().equals(&quot;Sampler configured for using existing connection, but there is no connection&quot;)
{
    requestSum++; 	        
	} 
if ( res.equals(&quot;200&quot;)) // || res.equals(&quot;101&quot;) ) 
{
	timeSum += sampleResult.getTime();
	requestSum++;
	Long average = timeSum / requestSum;
	bsh.shared.ws_status_avResp = average;
}
//String[] words = ${Thread_WS_Cookie1_${__threadNum}}.split(&quot;=&quot;);
//String sid = &quot;&quot;;
//String cookie_val = words[1];
//log.info(&quot;COOKIE VAL TEST&gt;&gt;&gt;&gt;&gt;&quot;+cookie_val);
//for (int i = 0; i &lt; words.length; i++) {
//  log.info(words[i]);
//  sid = &quot;sid=&quot;+ words[1];
//  log.info(&quot;The sid value is&quot;+sid);   
//}
//String var_name_cookie = sid;
//props.put(varNameCookie1, sid);
//props.put(cookieValue1, cookie_val);

requests.put(&quot;requestSum&quot;,String.valueOf(requestSum));
requests{&quot;timeSum&quot;}=String.valueOf(timeSum);
requests{&quot;failureSum&quot;}=String.valueOf(failure_count);
requests{&quot;sysFailureSum&quot;}=String.valueOf(sys_failure_count);
props.put(testType, requests);</stringProp>
        </BeanShellListener>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.PingFrameFilter guiclass="eu.luminis.jmeter.wssampler.PingFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.PingFrameFilter" testname="WebSocket Ping/Pong Frame Filter" enabled="true">
          <boolProp name="replyToPing">true</boolProp>
          <stringProp name="filterType">FilterAll</stringProp>
        </eu.luminis.jmeter.wssampler.PingFrameFilter>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.TextFrameFilter guiclass="eu.luminis.jmeter.wssampler.TextFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.TextFrameFilter" testname="WebSocket Text Frame Filter" enabled="true">
          <stringProp name="comparisonType">Contains</stringProp>
          <stringProp name="matchValue">Sampler error: unexpected frame type (close)</stringProp>
        </eu.luminis.jmeter.wssampler.TextFrameFilter>
        <hashTree/>
        <kg.apc.jmeter.modifiers.FifoPutPostProcessor guiclass="kg.apc.jmeter.modifiers.FifoPutPostProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPutPostProcessor" testname="jp@gc - Inter-Thread Communication PostProcessor" enabled="false">
          <stringProp name="Value">sid3</stringProp>
          <stringProp name="FifoName">SYNC_FIFO</stringProp>
        </kg.apc.jmeter.modifiers.FifoPutPostProcessor>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">true</boolProp>
        </DebugSampler>
        <hashTree/>
        <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="Runtime Controller" enabled="false">
          <stringProp name="RunTime.seconds">1</stringProp>
        </RunTime>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - Get Element List- Events-${__threadNum}" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
              <elementProp name="obj_name__contains" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${TERM_NAME_PREFIX}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">obj_name__contains</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/1.0/config/element/terminal</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Main HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Use-Cookie</stringProp>
                <stringProp name="Header.value">true</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Config - JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">obj_id_list</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..obj_id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get Config - Object List" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//Initial Get Config Post Processor
String myObj = &quot;${obj_id_list}&quot;; 
String trimmed_myObj=myObj.substring(1,(myObj.length()-1));

bsh.shared.objList = myObj;
props.put(&quot;OBJECT_LIST&quot;, myObj);

String STATS_METRIC_LIST =(&quot;2241,2242,1064,1065,1066,1067,2318,2321,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,2322,1098,2323,2324,2243,1101,1102,1103,1104,1105,1106,1107,1108,1109,1111,1112,1113,1114,1115,1117,1118,1119,1120,1121,1129,1130,1131,1132,1138,1690,1140,1141,1142,2279,1703,1146,1705,2239,1681,1148,1149,1159,1160,1710,1711,2430,1693,2355,1277,1279,2432,2328,1316,1317,1318,1319,1320&quot;); 
String[] metricArray = STATS_METRIC_LIST.split(&quot;,&quot;);
StringBuilder sbStr = new StringBuilder();
Integer metricCnt = Integer.parseInt(vars.get(&quot;NUM_STATS_METRICS&quot;));
for (int i = 0, il = Math.min(metricCnt,metricArray.length); i &lt; il; i++) {
    if (i &gt; 0)
        sbStr.append(&quot;,&quot;);
    sbStr.append(metricArray[i]);
}
props.put(&quot;vars_metric_list_stats&quot;,sbStr.toString());
//vars.put(&quot;vars_metric_list_stats&quot;,sbStr.toString());

String STATUS_METRIC_LIST =(&quot;1667,1701,2516,1675,1676,1677,1678,169211212&quot;);
metricArray = STATUS_METRIC_LIST.split(&quot;,&quot;);
sbStr = new StringBuilder();
metricCnt = Integer.parseInt(vars.get(&quot;NUM_STATUS_METRICS&quot;));
for (int i = 0, il = Math.min(metricCnt,metricArray.length); i &lt; il; i++) {
    if (i &gt; 0)
        sbStr.append(&quot;,&quot;);
    sbStr.append(metricArray[i]);
}
props.put(&quot;vars_metric_list_status&quot;,sbStr.toString());
//vars.put(&quot;vars_metric_list_status&quot;,sbStr.toString());


</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get Config - Global AUTH cookie" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
CookieManager manager = ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">code</stringProp>
            <stringProp name="RegexExtractor.refname">SamplerJSONResult_errors</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;errors\\&quot;:(\[\]|\[.*\])</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">[]</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Cookie" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">Thread_WS_Cookie1</stringProp>
            <stringProp name="RegexExtractor.regex">Set-Cookie: sid=::([A-Za-z0-9].*::[A-Za-z0-9].*);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">log.info(&quot;The Thread value given as cookie 2...................&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;));

vars.put(&quot;sid1&quot;, &quot;sid=::&quot;+ vars.get(&quot;Thread_WS_Cookie1&quot;)+ &quot;;&quot;);
log.info(&quot;THE SAID VALUE IS&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;+vars.get(&quot;sid1&quot;));


</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">${__setProperty(cookie_orig,${Thread_WS_Cookie1})};

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">

//props.put(&quot;sessionValue1&quot;, vars.get(&quot;cookie_value&quot;));
//props.put(&quot;sessionValueSid1&quot;, vars.get(&quot;cookie_value&quot;) + &quot;;&quot;);
//props.put(&quot;sessionPostValue1&quot;, &quot;::&quot;+vars.get(&quot;cookie_value&quot;));

//String details = vars.get(&quot;cookie_value&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
//System.out.println(&quot;The session post value&quot;+sessionPostValue);



//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();
//Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue1&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
//manager.add(cookie);

//Cookie cookie1 = new Cookie(&quot;SERVERID&quot;, serv1, &quot;${HOST}&quot;, &quot;/&quot;, false, 0)
//manager.add(cookie1)

props.put(&quot;sessionValue1&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
props.put(&quot;sessionValueSid1&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue1&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;));

//String details = vars.get(&quot;cookie_value&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
//System.out.println(&quot;The session post value&quot;+sessionPostValue);



import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue1&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">props.put(&quot;SID&quot;, vars.get(&quot;sid1&quot;));



//FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results12.csv&quot;,true);
//BufferedWriter out = new BufferedWriter(fstream);
//out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie&quot;));
//out.write(System.getProperty(&quot;line.separator&quot;));
//out.close();
//fstream.close();


props.put(&quot;sessionValue1&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
props.put(&quot;sessionValueSid1&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue1&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;));

//String details = vars.get(&quot;cookie_value&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
//System.out.println(&quot;The session post value&quot;+sessionPostValue);



import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue1&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);


</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="0"></stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">60000</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="jp@gc - Ultimate Thread Group-Stats-New" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="848986323">
            <stringProp name="478152815">${__evalVar(NUM_USERS)}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="1598">20</stringProp>
            <stringProp name="-1857560941">${TEST_DURATION}</stringProp>
            <stringProp name="50547">300</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">4</stringProp>
        </LoopController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - main" enabled="true">
            <stringProp name="IfController.condition">&quot;${stats_ws_connected}&quot;==&quot;false&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var startTimeStats = ${__time(/1000,)};
vars.put(&quot;stats_start_time1&quot;, String.valueOf(startTimeStats));

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">./${CREDENTIALS_CSV}</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">username,password</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="Open Stats WebSocket Sampler - ${__threadNum}" enabled="true">
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server">${HOST}</stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path">/api/${api_ver}/stats?resolution=${RESOLUTION}&amp;metric_id__in=2241,2242,1064,1065,1066,1067,2318,2321,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,2322,1098,2323,2324,2243,1101,1102,1103,1104,1105,1106,1107,1108,1109,1111,1112,1113,1114,1115,1117,1118,1119,1120,1121,1129,1130,1131,1132,1138,1690,1140,1141,1142,2279,1703,1146,1705,2239,1681,1148,1149,1159,1160,1710,1711,2430,1693,2355,1277,1279,2432,2328,1316,1317,1318,1319,1320&amp;element_id__in=${all_terminal_obj_ids}&amp;timestamp__gte=${stats_start_time1}&amp;stream=true&amp;batch=true</stringProp>
              <stringProp name="readTimeout">120000</stringProp>
              <stringProp name="connectTimeout">100000</stringProp>
            </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();

//Cookie cookie = new Cookie(&quot;Cookie&quot;,props.get(&quot;sid&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0)
//manager.add(cookie);

import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;,props.get(&quot;sid1&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0);
manager.add(cookie);

//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();
//manager.add(props.get(&quot;sid&quot;));
//Cookie cookie1 = new Cookie(&quot;vwo_logged_in&quot;,props.get(&quot;MyCookie1&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie1);
//Cookie cookie2 = new Cookie(&quot;vwola&quot;,props.get(&quot;MyCookie2&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie2);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();

Cookie cookie = new Cookie(&quot;Cookie&quot;,props.get(&quot;sid&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0)
manager.add(cookie);
//Cookie cookie1 = new Cookie(&quot;vwo_logged_in&quot;,props.get(&quot;MyCookie1&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie1);
//Cookie cookie2 = new Cookie(&quot;vwola&quot;,props.get(&quot;MyCookie2&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie2);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Stats Open WebSocket  PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">

if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
     prev.setSuccessful(true);
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
}
if (prev.getResponseCode().equals(&quot;101&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;true&quot;);
}
if (prev.getResponseMessage().equals(&quot;Close&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}

log.info(&quot;GET RESPONSE MESSAGE&gt;&gt;&gt;&gt;&quot;+prev.getResponseMessage());
var start_time =  ${__time(/1000,)};
vars.put(&quot;stats_start_time&quot;, String.valueOf(start_time));
vars.put(&quot;run_stats_ping_pong_sampler&quot;, &quot;false&quot;);

String var_name = &quot;stats_records_count_thread_&quot; + ${__threadNum} ; 
props.put(var_name, &quot;0&quot;);

//String[] words = ${Thread_WS_Cookie_${__threadNum}}.split(&quot;=&quot;);
//String sid = &quot;&quot;;
//String cookie_val = words[1];
//log.info(&quot;COOKIE VAL TEST&gt;&gt;&gt;&gt;&gt;&quot;+cookie_val);
//for (int i = 0; i &lt; words.length; i++) {
//  log.info(words[i]);
//  sid = &quot;sid=&quot;+ words[1];
//  log.info(&quot;The sid value is&quot;+sid);   
//}
//String var_name_cookie = sid;
//props.put(varNameCookie3, sid);
//props.put(cookieValue3, cookie_val);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">

//props.put(&quot;sessionValue1&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionValueSid1&quot;, &quot;sid=::&quot;+ vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionPostValue1&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;cookiepresent&quot;, ${COOKIE_sid});

//String details = vars.get(&quot;cookie_value&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
//System.out.println(&quot;The session post value&quot;+sessionPostValue);

//log.info(&quot;Cookie value&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+${COOKIE_}+props.get(&quot;sessionValue1&quot;));

//import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy;
//HTTPSamplerProxy sampler = ctx.getCurrentSampler();

//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();
//Cookie cookie = new Cookie(&quot;sid&quot;, vars.get(&quot;sessionPostValue1&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
//manager.add(cookie);
import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();

Cookie cookie = new Cookie(&quot;sid&quot;,props.get(&quot;sid&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0)
manager.add(cookie);
//Cookie cookie1 = new Cookie(&quot;vwo_logged_in&quot;,props.get(&quot;MyCookie1&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie1);
//Cookie cookie2 = new Cookie(&quot;vwola&quot;,props.get(&quot;MyCookie2&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie2);

//props.put(&quot;sessionCookiePost&quot;, ${Cookie_}+&quot;::&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;))

//Cookie cookie1 = new Cookie(&quot;SERVERID&quot;, serv1, &quot;${HOST}&quot;, &quot;/&quot;, false, 0)
//manager.add(cookie1)

</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <kg.apc.jmeter.modifiers.FifoPopPreProcessor guiclass="kg.apc.jmeter.modifiers.FifoPopPreProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPopPreProcessor" testname="jp@gc - Inter-Thread Communication PreProcessor" enabled="false">
                <stringProp name="Timeout"></stringProp>
                <stringProp name="Variable">sid1</stringProp>
                <stringProp name="FifoName">SYNC_FIFO</stringProp>
              </kg.apc.jmeter.modifiers.FifoPopPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">props.put(&quot;SID&quot;, vars.get(&quot;sid1&quot;));



FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results12.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get Config - Global AUTH cookie" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
CookieManager manager = ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">SamplerJSONResult_errors</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;errors\\&quot;:(\[\]|\[.*\])</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">[]</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Cookie" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">Thread_WS_Cookie5</stringProp>
                <stringProp name="RegexExtractor.regex">cookie: sid=::([A-Za-z0-9].*::[A-Za-z0-9].*?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">log.info(&quot;The ALARMS NEW COOKIE IS&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;));

if ( vars.get(&quot;Thread_WS_Cookie5&quot;).length == 0){
	vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;)
}

props.put(&quot;sessionValue5&quot;, vars.get(&quot;Thread_WS_Cookie5&quot;));
props.put(&quot;sessionValueSid5&quot;, vars.get(&quot;Thread_WS_Cookie5&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue5&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;));
props.put(&quot;sessionPostSidValue5&quot;, &quot;sid=::&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;));
//props.put(&quot;sessionPostSidValue4&quot;, &quot;sid=::&quot;+vars.get(&quot;Thread_WS_Cookie4&quot;));

//props.put(&quot;sessionCookieValue1&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;))



import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostSidValue5&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);


FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results123.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Main HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Use-Cookie</stringProp>
                    <stringProp name="Header.value">true</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;-${__threadNum}-${username}</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">3000</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - main" enabled="false">
            <stringProp name="IfController.condition">&quot;${stats_ws_connected}&quot;==&quot;false&quot; &amp;&amp; &quot;${new_connection_logging}&quot;==&quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var startTimeStats = ${__time(/1000,)};
vars.put(&quot;stats_start_time1&quot;, String.valueOf(startTimeStats));

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="Open Stats WebSocket Sampler - ${__threadNum}" enabled="true">
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server">${HOST}</stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path">/api/${api_ver}/stats?resolution=${RESOLUTION}&amp;metric_id__in=2241,2242,1064,1065,1066,1067,2318,2321,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,2322,1098,2323,2324,2243,1101,1102,1103,1104,1105,1106,1107,1108,1109,1111,1112,1113,1114,1115,1117,1118,1119,1120,1121,1129,1130,1131,1132,1138,1690,1140,1141,1142,2279,1703,1146,1705,2239,1681,1148,1149,1159,1160,1710,1711,2430,1693,2355,1277,1279,2432,2328,1316,1317,1318,1319,1320&amp;element_id__in=${all_terminal_obj_ids}&amp;timestamp__gte=${stats_start_time1}&amp;stream=true&amp;batch=true</stringProp>
              <stringProp name="readTimeout">120000</stringProp>
              <stringProp name="connectTimeout">100000</stringProp>
            </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();

//Cookie cookie = new Cookie(&quot;Cookie&quot;,props.get(&quot;sid&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0)
//manager.add(cookie);

import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;,props.get(&quot;sid1&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0);
manager.add(cookie);

//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();
//manager.add(props.get(&quot;sid&quot;));
//Cookie cookie1 = new Cookie(&quot;vwo_logged_in&quot;,props.get(&quot;MyCookie1&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie1);
//Cookie cookie2 = new Cookie(&quot;vwola&quot;,props.get(&quot;MyCookie2&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie2);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();

Cookie cookie = new Cookie(&quot;Cookie&quot;,props.get(&quot;sid&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0)
manager.add(cookie);
//Cookie cookie1 = new Cookie(&quot;vwo_logged_in&quot;,props.get(&quot;MyCookie1&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie1);
//Cookie cookie2 = new Cookie(&quot;vwola&quot;,props.get(&quot;MyCookie2&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie2);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Stats Open WebSocket  PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">

if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
     prev.setSuccessful(true);
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
}
if (prev.getResponseCode().equals(&quot;101&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;true&quot;);
}
if (prev.getResponseMessage().equals(&quot;Close&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}

log.info(&quot;GET RESPONSE MESSAGE&gt;&gt;&gt;&gt;&quot;+prev.getResponseMessage());
var start_time =  ${__time(/1000,)};
vars.put(&quot;stats_start_time&quot;, String.valueOf(start_time));
vars.put(&quot;run_stats_ping_pong_sampler&quot;, &quot;false&quot;);

String var_name = &quot;stats_records_count_thread_&quot; + ${__threadNum} ; 
props.put(var_name, &quot;0&quot;);

//String[] words = ${Thread_WS_Cookie_${__threadNum}}.split(&quot;=&quot;);
//String sid = &quot;&quot;;
//String cookie_val = words[1];
//log.info(&quot;COOKIE VAL TEST&gt;&gt;&gt;&gt;&gt;&quot;+cookie_val);
//for (int i = 0; i &lt; words.length; i++) {
//  log.info(words[i]);
//  sid = &quot;sid=&quot;+ words[1];
//  log.info(&quot;The sid value is&quot;+sid);   
//}
//String var_name_cookie = sid;
//props.put(varNameCookie3, sid);
//props.put(cookieValue3, cookie_val);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Main HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Use-Cookie</stringProp>
                    <stringProp name="Header.value">true</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;-${__threadNum}-${username}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">

//props.put(&quot;sessionValue1&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionValueSid1&quot;, &quot;sid=::&quot;+ vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionPostValue1&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;cookiepresent&quot;, ${COOKIE_sid});

//String details = vars.get(&quot;cookie_value&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
//System.out.println(&quot;The session post value&quot;+sessionPostValue);

//log.info(&quot;Cookie value&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+${COOKIE_}+props.get(&quot;sessionValue1&quot;));

//import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy;
//HTTPSamplerProxy sampler = ctx.getCurrentSampler();

//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();
//Cookie cookie = new Cookie(&quot;sid&quot;, vars.get(&quot;sessionPostValue1&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
//manager.add(cookie);
import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();

Cookie cookie = new Cookie(&quot;sid&quot;,props.get(&quot;sid&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0)
manager.add(cookie);
//Cookie cookie1 = new Cookie(&quot;vwo_logged_in&quot;,props.get(&quot;MyCookie1&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie1);
//Cookie cookie2 = new Cookie(&quot;vwola&quot;,props.get(&quot;MyCookie2&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie2);

//props.put(&quot;sessionCookiePost&quot;, ${Cookie_}+&quot;::&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;))

//Cookie cookie1 = new Cookie(&quot;SERVERID&quot;, serv1, &quot;${HOST}&quot;, &quot;/&quot;, false, 0)
//manager.add(cookie1)

</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <kg.apc.jmeter.modifiers.FifoPopPreProcessor guiclass="kg.apc.jmeter.modifiers.FifoPopPreProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPopPreProcessor" testname="jp@gc - Inter-Thread Communication PreProcessor" enabled="false">
                <stringProp name="Timeout"></stringProp>
                <stringProp name="Variable">sid1</stringProp>
                <stringProp name="FifoName">SYNC_FIFO</stringProp>
              </kg.apc.jmeter.modifiers.FifoPopPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">props.put(&quot;SID&quot;, vars.get(&quot;sid1&quot;));



FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results12.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get Config - Global AUTH cookie" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
CookieManager manager = ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">SamplerJSONResult_errors</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;errors\\&quot;:(\[\]|\[.*\])</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">[]</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Cookie" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">Thread_WS_Cookie5</stringProp>
                <stringProp name="RegexExtractor.regex">cookie: sid=::([A-Za-z0-9].*::[A-Za-z0-9].*?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">log.info(&quot;The ALARMS NEW COOKIE IS&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;));

if ( vars.get(&quot;Thread_WS_Cookie5&quot;).length == 0){
	vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;)
}

props.put(&quot;sessionValue5&quot;, vars.get(&quot;Thread_WS_Cookie5&quot;));
props.put(&quot;sessionValueSid5&quot;, vars.get(&quot;Thread_WS_Cookie5&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue5&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;));
props.put(&quot;sessionPostSidValue5&quot;, &quot;sid=::&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;));
//props.put(&quot;sessionPostSidValue4&quot;, &quot;sid=::&quot;+vars.get(&quot;Thread_WS_Cookie4&quot;));

//props.put(&quot;sessionCookieValue1&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;))



import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostSidValue5&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);


FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results123.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">3000</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${stats_ws_connected}&quot;==&quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Post to have a logout-Stats-${__threadNum}" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;session_id&quot; : &quot;${__P(sessionPostValue5)}&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port">80</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/1.0/core/logout</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">120000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">120000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);

//props.put(&quot;sessionValue2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionValueSid2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue5&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;));



//log.info(&quot;THE SESSION VALUE........&quot;+vars.get(&quot;cookie_value&quot;))
if (${DEBUG_FLAG} == true){
log.info(&quot;Stats logout value............&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;));
}
//props.put(&quot;sessionCookieValue2&quot;, &quot;::&quot;+${COOKIE_}+props.get(&quot;sessionCookieValue1&quot;))


import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue5&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);

//System.out.println(&quot;Cookie value&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+${COOKIE_}+props.get(&quot;sessionValue1&quot;));

//vars.put(&quot;stats_ws_connected&quot;, &quot;false&quot;)</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">if (prev.getResponseCode().equals(&quot;502&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;500&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(true);
}

vars.put(&quot;stats_ws_connected&quot;, &quot;false&quot;)</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Use-Cookie</stringProp>
                    <stringProp name="Header.value">false</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">${__P(sessionPostSidValue5)}</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="Read Stats WebSocket Sampler - ${__threadNum}-${__V(Thread_WS_Cookie5)}" enabled="true">
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server"></stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path"></stringProp>
              <boolProp name="binaryPayload">false</boolProp>
              <boolProp name="createNewConnection">false</boolProp>
              <boolProp name="optional">true</boolProp>
              <stringProp name="readTimeout">120000</stringProp>
              <stringProp name="connectTimeout">20000</stringProp>
              <stringProp name="dataType">Text</stringProp>
            </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();

//Cookie cookie = new Cookie(&quot;Cookie&quot;,props.get(&quot;sid&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0)
//manager.add(cookie);

import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;,props.get(&quot;sid1&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0);
manager.add(cookie);

//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();
//manager.add(props.get(&quot;sid&quot;));
//Cookie cookie1 = new Cookie(&quot;vwo_logged_in&quot;,props.get(&quot;MyCookie1&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie1);
//Cookie cookie2 = new Cookie(&quot;vwola&quot;,props.get(&quot;MyCookie2&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie2);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();

Cookie cookie = new Cookie(&quot;Cookie&quot;,props.get(&quot;sid&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0)
manager.add(cookie);
//Cookie cookie1 = new Cookie(&quot;vwo_logged_in&quot;,props.get(&quot;MyCookie1&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie1);
//Cookie cookie2 = new Cookie(&quot;vwola&quot;,props.get(&quot;MyCookie2&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie2);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);

//props.put(&quot;sessionValue2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionValueSid2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue5&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;));



//log.info(&quot;THE SESSION VALUE........&quot;+vars.get(&quot;cookie_value&quot;))
log.info(&quot;READ ALARMS SAMPLER....&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;));

//props.put(&quot;sessionCookieValue2&quot;, &quot;::&quot;+${COOKIE_}+props.get(&quot;sessionCookieValue1&quot;))


import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, ${COOKIE_}+props.get(&quot;sessionCookieValue5&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);

//System.out.println(&quot;Cookie value&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+${COOKIE_}+props.get(&quot;sessionValue1&quot;));

</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Stats Read WebSocket  PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//Alarms Read WebSocket PostProcessor

if (prev.getResponseCode().equals(&quot;500&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;502&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;503&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseMessage().equals(&quot;Close&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}


if (prev.getResponseCode().equals(&quot;Websocket error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
	     prev.setSuccessful(false);
	} else {
		vars.put(&quot;stats_ws_connected&quot;,&quot;true&quot;);
	}
}
if (prev.getResponseCode().equals(&quot;Websocket I/O error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;)) {
	     prev.setSuccessful(false);
	} else {
		vars.put(&quot;stats_ws_connected&quot;,&quot;true&quot;);
	}
	prev.setSuccessful(true);
	vars.put(&quot;stats_ws_connected&quot;,&quot;true&quot;);
}

log.info( &quot;The response code for stats is given by&gt;&gt;&gt;&gt;&gt;&quot; + prev.getResponseCode());

if (prev.getResponseCode().equals(&quot;Sampler error&quot;)) {
//Response code: Sampler error
//Response message: Sampler configured for using existing connection, but there is no connection
		vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
		prev.setSuccessful(true);
}

if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
     prev.setSuccessful(true);
     vars.put(&quot;stats_ws_connected&quot;,&quot;true&quot;);
}

var currTime = ${__time(/1000,)};
var startTime = Integer.parseInt(vars.get(&quot;stats_start_time&quot;));
var startTimeAlarms = Integer.parseInt(vars.get(&quot;stats_start_time1&quot;));



//Have the slot time 

log.info(&quot;TEST DURATION GIVEN AS&quot;+vars.get(&quot;TEST_DURATION&quot;));
log.info(&quot;CURRENT TIME&quot;+${__javaScript(${__time(,)} / 1000,)});
log.info(&quot;TIME GIVEN&quot;+(currTime - startTimeAlarms));

if( (currTime - startTime) &gt;= Integer.parseInt(vars.get(&quot;ping_pong_interval&quot;))) {
	log.info( &quot;ping_pong_interval period exceeded for stats : &quot; + String.valueOf(currTime - startTime) );
	vars.put (&quot;run_stats_ping_pong_sampler&quot;, &quot;true&quot;);
	//Reset Start Time to currTime
	vars.put(&quot;stats_start_time&quot;, String.valueOf(currTime));
} else {
	vars.put (&quot;run_stats_ping_pong_sampler&quot;, &quot;false&quot;);
}

//if ( vars.get(&quot;TEST_DURATION&quot;).equals(&quot;21600&quot;)){
//	log.info(&quot;INSIDE THE IF CONDITION FOR 6 HOURS.......&quot;);
//	for (int i=0; i&lt; = 24; i++ ){
//		//if ( (i % 2 == 0) || (i ==1)  ){
//			if ((currTime - startTimeAlarms) == 900 * i ){
//				vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;);
//			}
		//}
//	}
//} else {
//    log.info(&quot;INSIDE THE ELSW CONDITION FOR &lt; 6 HOURS.......&quot;);
//    vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;);
//}
//log.info(&quot;THE INITIAL COMMAND EXECUTION&quot;+vars.get(initial_command_execution));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor stats main" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper;

def jsonSlurper = new JsonSlurper();
if(prev.getResponseCode().equals(&quot;200&quot;) ){
	def response = jsonSlurper.parseText(prev.getResponseDataAsString());
	def payload = jsonSlurper.parseText(response.payload);
	int record_count = Integer.parseInt(props.get(&quot;stats_records_count_thread_&quot; + ${__threadNum}));
	record_count += 1;
	props.put(&quot;stats_records_count_thread_&quot; + ${__threadNum}, String.valueOf(record_count));
}

//String[] words = ${Thread_WS_Cookie2_${__threadNum}}.split(&quot;=&quot;);
//String sid = &quot;&quot;;
//String cookie_val = words[1];
//log.info(&quot;COOKIE VAL TEST&gt;&gt;&gt;&gt;&gt;&quot;+cookie_val);
//for (int i = 0; i &lt; words.length; i++) {
//  log.info(words[i]);
 // sid = &quot;sid=&quot;+ words[1];
//  log.info(&quot;The sid value is&quot;+sid);   /
//}
//String var_name_cookie = sid;
//props.put(varNameCookie3, sid);
//props.put(cookieValue3, cookie_val);

</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">SamplerJSONResult_errors</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;errors\\&quot;:(\[\]|\[.*\])</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">[]</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Alarms Read WebSocket PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//Alarms Read WebSocket PostProcessor


//if (prev.getResponseCode().equals(&quot;500&quot;)) {
//     vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
//     prev.setSuccessful(false);
//}
if (prev.getResponseCode().equals(&quot;502&quot;)) {
     vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;503&quot;)) {
     vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseMessage().equals(&quot;Close&quot;)) {
     vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}

if (prev.getResponseCode().equals(&quot;403&quot;)) {
	vars.put(&quot;alarms_ws_connected&quot;,&quot;true&quot;);
     prev.setSuccessful(true);
}

if (prev.getResponseCode().equals(&quot;500&quot;)) {
	vars.put(&quot;alarms_ws_connected&quot;,&quot;true&quot;);
     prev.setSuccessful(true);
}
if (prev.getResponseCode().equals(&quot;Websocket error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
	     prev.setSuccessful(true);
	} else {
		vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
	}
}
if (prev.getResponseCode().equals(&quot;Websocket I/O error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;)) {
	     prev.setSuccessful(true);
	} else {
		vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
	}
}

log.info( &quot;The response code for stats is given by&gt;&gt;&gt;&gt;&gt;&quot; + prev.getResponseCode());
if (prev.getResponseCode().equals(&quot;Sampler error&quot;)) {
//Response code: Sampler error
//Response message: Sampler configured for using existing connection, but there is no connection
		vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
}

if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
     prev.setSuccessful(true);
}

var currTime = ${__time(/1000,)};
var startTime = Integer.parseInt(vars.get(&quot;alarms_start_time&quot;));

if( (currTime - startTime) &gt;= Integer.parseInt(vars.get(&quot;ping_pong_interval&quot;))) {
	if (${DEBUG_FLAG} == true){
	log.info( &quot;ping_pong_interval period exceeded for alarms : &quot; + String.valueOf(currTime - startTime) );
	}
	vars.put (&quot;run_alarms_ping_pong_sampler&quot;, &quot;true&quot;);
	//Reset Start Time to currTime
	vars.put(&quot;alarms_start_time&quot;, String.valueOf(currTime));
} else {
	vars.put (&quot;run_alarms_ping_pong_sampler&quot;, &quot;false&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Main HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Use-Cookie</stringProp>
                    <stringProp name="Header.value">true</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;-${__threadNum}-${username}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">props.put(&quot;sessionCookieValue5&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;))

FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results123.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();


//props.put(&quot;sessionCookieValue&quot;, vars.get(&quot;Thread_WS_Cookie2&quot;))</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//props.put(&quot;sessionCookieValue&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;))

//FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results123.csv&quot;,true);
//BufferedWriter out = new BufferedWriter(fstream);
//out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;));
//out.write(System.getProperty(&quot;line.separator&quot;));
//out.close();
//fstream.close();

var currTimeNew = ${__time(/1000,)};
var startTimeNew = Integer.parseInt(vars.get(&quot;stats_start_time1&quot;));

log.info(&quot;The current time value is: ${starttime_value}&quot;);

//props.put(&quot;sessionCookieValue&quot;, vars.get(&quot;Thread_WS_Cookie2&quot;))

//if ( vars.get(&quot;test_duration_1&quot;).equals(&quot;300&quot;)){
log.info(&quot;INSIDE THE IF CONDITION FOR 6 HOURS.......&quot;);
//for (int i=0; i&lt; = 24; i++ ){
//if ( (i % 2 == 0) || (i ==1)  ){

//var test_duration = ${TEST_DURATION} - 100
//var timePresent = Integer.parseInt(vars.get(&quot;TEST_DURATION&quot;)) - 100

log.info(&quot;The test duration=============&quot;+${TEST_DURATION});
log.info( &quot;In current new and start new : &quot; + String.valueOf(currTimeNew - startTimeNew));

if ((currTimeNew - startTimeNew) &gt;= ${TEST_DURATION} - 600){
	     log.info(&quot;INSIDE THE IF CONDITION FOR TIME COMPARISION....&quot;);
		vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;);
		vars.put(&quot;end_test&quot;, &quot;true&quot;);
	}
		//}

//} else {
//    log.info(&quot;INSIDE THE ELSW CONDITION FOR &lt; 6 HOURS.......&quot;);
//    vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;);
//}
log.info(&quot;THE INITIAL COMMAND EXECUTION&quot;+vars.get(initial_command_execution));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <eu.luminis.jmeter.wssampler.CloseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.CloseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.CloseWebSocketSampler" testname="WebSocket Close" enabled="false">
              <stringProp name="statusCode">1000</stringProp>
              <stringProp name="readTimeout">6000</stringProp>
            </eu.luminis.jmeter.wssampler.CloseWebSocketSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">3000</stringProp>
            </TestAction>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
              <stringProp name="IfController.condition">&quot;${initial_command_execution}&quot;==&quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                <stringProp name="filename">C:/Users/akarthik/results123.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">cookie, cookie_value</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.thread</stringProp>
              </CSVDataSet>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">30000</stringProp>
              </TestAction>
              <hashTree/>
              <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
                <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
              </CriticalSectionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Post to have a logout-Stats-${__threadNum}-${__P(sessionPostValue5)}" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;session_id&quot; : &quot;${__P(sessionPostValue5)}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port">80</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/2.0/config/logout</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout">120000</stringProp>
                  <stringProp name="HTTPSampler.response_timeout">120000</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);

//props.put(&quot;sessionValue2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionValueSid2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue5&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;));



//log.info(&quot;THE SESSION VALUE........&quot;+vars.get(&quot;cookie_value&quot;))
log.info(&quot;.&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;));

//props.put(&quot;sessionCookieValue2&quot;, &quot;::&quot;+${COOKIE_}+props.get(&quot;sessionCookieValue1&quot;))


import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue5&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);

//System.out.println(&quot;Cookie value&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+${COOKIE_}+props.get(&quot;sessionValue1&quot;));

//vars.put(&quot;status_ws_connected&quot;, &quot;false&quot;)</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Use-Cookie</stringProp>
                        <stringProp name="Header.value">true</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">if (prev.getResponseCode().equals(&quot;502&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;500&quot;) || prev.getResponseCode().equals(&quot;204&quot;)) {
     //vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     vars.put(&quot;end_test&quot;, &quot;true&quot;);
     prev.setSuccessful(true);
}
vars.put(&quot;end_test&quot;, &quot;true&quot;);
//vars.put(&quot;stats_ws_connected&quot;, &quot;false&quot;)</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="52469">500</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                    <collectionProp name="CookieManager.cookies"/>
                    <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                    <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
                    <stringProp name="CookieManager.policy">standard-strict</stringProp>
                  </CookieManager>
                  <hashTree/>
                  <PoissonRandomTimer guiclass="PoissonRandomTimerGui" testclass="PoissonRandomTimer" testname="Poisson Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">2000</stringProp>
                    <stringProp name="RandomTimer.range">100</stringProp>
                  </PoissonRandomTimer>
                  <hashTree/>
                </hashTree>
                <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="false"/>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${end_test}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                <intProp name="ActionProcessor.action">2</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">2000</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Run PingPong" enabled="true">
            <stringProp name="IfController.condition">&quot;${run_stats_ping_pong_sampler}&quot;==&quot;true&quot; || &quot;${enable_ping_pong}&quot;==&quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <eu.luminis.jmeter.wssampler.PingPongSampler guiclass="eu.luminis.jmeter.wssampler.PingPongSamplerGui" testclass="eu.luminis.jmeter.wssampler.PingPongSampler" testname="WebSocket Ping/Pong for Stats-${__V(Thread_WS_Cookie5)}" enabled="true">
              <stringProp name="type">Pong</stringProp>
              <stringProp name="readTimeout">100000</stringProp>
            </eu.luminis.jmeter.wssampler.PingPongSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//Alarms Read WebSocket PostProcessor

if (prev.getResponseCode().equals(&quot;500&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;502&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;503&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseMessage().equals(&quot;Close&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}

if (prev.getResponseMessage().equals(&quot;200&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;true&quot;);
     prev.setSuccessful(true);
}

if (prev.getResponseCode().equals(&quot;Websocket error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
	     prev.setSuccessful(false);
	} else {
		vars.put(&quot;stats_ws_connected&quot;,&quot;true&quot;);
	}
}
if (prev.getResponseCode().equals(&quot;Websocket I/O error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;)) {
	     prev.setSuccessful(true);
	} else {
		vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
	}
	prev.setSuccessful(true);
	//vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
}

log.info( &quot;The response code for status is given by&gt;&gt;&gt;&gt;&gt;&quot; + prev.getResponseCode());

if (prev.getResponseCode().equals(&quot;Sampler error&quot;)) {
//Response code: Sampler error
//Response message: Sampler configured for using existing connection, but there is no connection
		//vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
		prev.setSuccessful(true);
		vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
}

if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
     prev.setSuccessful(true);
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <eu.luminis.jmeter.wssampler.CloseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.CloseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.CloseWebSocketSampler" testname="WebSocket Close" enabled="false">
            <stringProp name="statusCode">1000</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
          </eu.luminis.jmeter.wssampler.CloseWebSocketSampler>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.TextFrameFilter guiclass="eu.luminis.jmeter.wssampler.TextFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.TextFrameFilter" testname="WebSocket Text Frame Filter" enabled="false">
            <stringProp name="comparisonType">Contains</stringProp>
            <stringProp name="matchValue">User session</stringProp>
          </eu.luminis.jmeter.wssampler.TextFrameFilter>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
          <stringProp name="IfController.condition">&quot;${run_once}&quot; == &quot;false&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
          <hashTree/>
        </hashTree>
        <BeanShellListener guiclass="TestBeanGUI" testclass="BeanShellListener" testname="Stats WebSocket BeanShell Listener - ${__threadNum}" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">/* WS - Status - Calculate across all threads */

//Start of new PostProcesser
String res=sampleResult.getResponseCode();
String testType = &quot;ws_stats_requests&quot;;
Map requests = new HashMap();
Long sys_failure_count=0;
Long failure_count=0;
Long requestSum = 0;
Long timeSum = 0;
Boolean Failure = false;

if (res.equals(&quot;101&quot;)) {
	if (!sampleResult.getResponseMessage().equals(&quot;Switching Protocols&quot;)) {
		sys_failure_count++;		
	}
} else if (!res.equals(&quot;200&quot;)) {
	//Ignore if it is a regular read tmieout...
	if (
		!sampleResult.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;) &amp;&amp; 
		!sampleResult.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;) &amp;&amp;
		!sampleResult.getResponseMessage().equals(&quot;Read timeout, no response received.&quot;)
	   ) 
	{
		sys_failure_count++;		
	}
	//#TODOwhat about f (sampleResult.getResponseMessage().equals(&quot;Received: Close frame with status code 1000 and close reason \&apos;null\&apos;&quot;)) {
} else {

	String errors = vars.get(&quot;SamplerJSONResult_errors&quot;);

	if (errors != null &amp;&amp; !errors.equals(&quot;[]&quot;)) // When using Regular Expression Extractor
	{
		if (${DEBUG_FLAG} == true){
		//Failure
			log.error(&quot;WS Status - You had an error: &quot; + errors);
		}
	     sampleResult.setResponseMessage(errors);
		Failure = true;
	     sampleResult.setSuccessful(false);
	}
     if (Failure) {
		failure_count++;
     }
}

if ( res.equals(&quot;200&quot;)) // || res.equals(&quot;101&quot;) ) 
{
	timeSum += sampleResult.getTime();
	requestSum++;
	Long average = timeSum / requestSum;
	bsh.shared.ws_status_avResp = average;
}

//String[] words = ${Thread_WS_Cookie3_${__threadNum}}.split(&quot;=&quot;);
//String sid = &quot;&quot;;
//String cookie_val = words[1];
//log.info(&quot;COOKIE VAL TEST&gt;&gt;&gt;&gt;&gt;&quot;+cookie_val);
//for (int i = 0; i &lt; words.length; i++) {
//  log.info(words[i]);
//  sid = &quot;sid=&quot;+ words[1];
//  log.info(&quot;The sid value is&quot;+sid);   
//}
//String var_name_cookie = sid;
//props.put(varNameCookie3, sid);
//props.put(cookieValue3, cookie_val);

requests.put(&quot;requestSum&quot;,String.valueOf(requestSum));
requests{&quot;timeSum&quot;}=String.valueOf(timeSum);
requests{&quot;failureSum&quot;}=String.valueOf(failure_count);
requests{&quot;sysFailureSum&quot;}=String.valueOf(sys_failure_count);
props.put(testType, requests);</stringProp>
        </BeanShellListener>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.PingFrameFilter guiclass="eu.luminis.jmeter.wssampler.PingFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.PingFrameFilter" testname="WebSocket Ping/Pong Frame Filter" enabled="true">
          <boolProp name="replyToPing">true</boolProp>
          <stringProp name="filterType">FilterAll</stringProp>
        </eu.luminis.jmeter.wssampler.PingFrameFilter>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.TextFrameFilter guiclass="eu.luminis.jmeter.wssampler.TextFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.TextFrameFilter" testname="WebSocket Text Frame Filter" enabled="true">
          <stringProp name="comparisonType">Contains</stringProp>
          <stringProp name="matchValue">Sampler error: unexpected frame type (close)</stringProp>
        </eu.luminis.jmeter.wssampler.TextFrameFilter>
        <hashTree/>
        <kg.apc.jmeter.modifiers.FifoPutPostProcessor guiclass="kg.apc.jmeter.modifiers.FifoPutPostProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPutPostProcessor" testname="jp@gc - Inter-Thread Communication PostProcessor" enabled="false">
          <stringProp name="Value">sid5</stringProp>
          <stringProp name="FifoName">SYNC_FIFO</stringProp>
        </kg.apc.jmeter.modifiers.FifoPutPostProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
          <stringProp name="IfController.condition">&quot;${initial_command_execution}&quot;==&quot;false&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
            <stringProp name="filename">C:/Users/akarthik/results123.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">cookie, cookie_value</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Post to have a logout-Stats" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;session_id&quot; : &quot;${__P(sessionPostValue5)}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/1.0/core/logout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">120000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">120000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);

//props.put(&quot;sessionValue2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionValueSid2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue5&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;));



//log.info(&quot;THE SESSION VALUE........&quot;+vars.get(&quot;cookie_value&quot;))
log.info(&quot;EVENTS COOKIE VALUE..........................&quot;+vars.get(&quot;Thread_WS_Cookie5&quot;));

//props.put(&quot;sessionCookieValue2&quot;, &quot;::&quot;+${COOKIE_}+props.get(&quot;sessionCookieValue1&quot;))


import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, ${COOKIE_}+props.get(&quot;sessionCookieValue5&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);

//System.out.println(&quot;Cookie value&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+${COOKIE_}+props.get(&quot;sessionValue1&quot;));

vars.put(&quot;run_once&quot;, &quot;true&quot;)</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Use-Cookie</stringProp>
                  <stringProp name="Header.value">true</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">${Cookie_sid}</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - Get Element List-Stats- ${__threadNum}" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
              <elementProp name="obj_name__contains" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${TERM_NAME_PREFIX}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">obj_name__contains</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/1.0/config/element/terminal</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Main HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Use-Cookie</stringProp>
                <stringProp name="Header.value">true</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Config - JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">obj_id_list1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..obj_id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get Config - Object List" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//Initial Get Config Post Processor
String myObj = &quot;${obj_id_list1}&quot;; 
String trimmed_myObj=myObj.substring(1,(myObj.length()-1));

bsh.shared.objList = myObj;
props.put(&quot;OBJECT_LIST&quot;, myObj);

String STATS_METRIC_LIST =(&quot;2241,2242,1064,1065,1066,1067,2318,2321,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,2322,1098,2323,2324,2243,1101,1102,1103,1104,1105,1106,1107,1108,1109,1111,1112,1113,1114,1115,1117,1118,1119,1120,1121,1129,1130,1131,1132,1138,1690,1140,1141,1142,2279,1703,1146,1705,2239,1681,1148,1149,1159,1160,1710,1711,2430,1693,2355,1277,1279,2432,2328,1316,1317,1318,1319,1320&quot;); 
String[] metricArray = STATS_METRIC_LIST.split(&quot;,&quot;);
StringBuilder sbStr = new StringBuilder();
Integer metricCnt = Integer.parseInt(vars.get(&quot;NUM_STATS_METRICS&quot;));
for (int i = 0, il = Math.min(metricCnt,metricArray.length); i &lt; il; i++) {
    if (i &gt; 0)
        sbStr.append(&quot;,&quot;);
    sbStr.append(metricArray[i]);
}
props.put(&quot;vars_metric_list_stats&quot;,sbStr.toString());
//vars.put(&quot;vars_metric_list_stats&quot;,sbStr.toString());

String STATUS_METRIC_LIST =(&quot;1667,1701,2516,1675,1676,1677,1678&quot;);
metricArray = STATUS_METRIC_LIST.split(&quot;,&quot;);
sbStr = new StringBuilder();
metricCnt = Integer.parseInt(vars.get(&quot;NUM_STATUS_METRICS&quot;));
for (int i = 0, il = Math.min(metricCnt,metricArray.length); i &lt; il; i++) {
    if (i &gt; 0)
        sbStr.append(&quot;,&quot;);
    sbStr.append(metricArray[i]);
}
props.put(&quot;vars_metric_list_status&quot;,sbStr.toString());
//vars.put(&quot;vars_metric_list_status&quot;,sbStr.toString());


</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get Config - Global AUTH cookie" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
CookieManager manager = ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">code</stringProp>
            <stringProp name="RegexExtractor.refname">SamplerJSONResult_errors</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;errors\\&quot;:(\[\]|\[.*\])</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">[]</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Cookie" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">Thread_WS_Cookie1</stringProp>
            <stringProp name="RegexExtractor.regex">Set-Cookie: sid=::([A-Za-z0-9].*::[A-Za-z0-9].*);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">log.info(&quot;The Thread value given as cookie 2...................&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;));

vars.put(&quot;sid1&quot;, &quot;sid=::&quot;+ vars.get(&quot;Thread_WS_Cookie1&quot;)+ &quot;;&quot;);
log.info(&quot;THE SAID VALUE IS&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;+vars.get(&quot;sid1&quot;));


</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">${__setProperty(cookie_orig,${Thread_WS_Cookie1})};

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">

//props.put(&quot;sessionValue1&quot;, vars.get(&quot;cookie_value&quot;));
//props.put(&quot;sessionValueSid1&quot;, vars.get(&quot;cookie_value&quot;) + &quot;;&quot;);
//props.put(&quot;sessionPostValue1&quot;, &quot;::&quot;+vars.get(&quot;cookie_value&quot;));

//String details = vars.get(&quot;cookie_value&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
//System.out.println(&quot;The session post value&quot;+sessionPostValue);



//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();
//Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue1&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
//manager.add(cookie);

//Cookie cookie1 = new Cookie(&quot;SERVERID&quot;, serv1, &quot;${HOST}&quot;, &quot;/&quot;, false, 0)
//manager.add(cookie1)

props.put(&quot;sessionValue1&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
props.put(&quot;sessionValueSid1&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue1&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;));

//String details = vars.get(&quot;cookie_value&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
//System.out.println(&quot;The session post value&quot;+sessionPostValue);



import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue1&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">props.put(&quot;SID&quot;, vars.get(&quot;sid1&quot;));



//FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results12.csv&quot;,true);
//BufferedWriter out = new BufferedWriter(fstream);
//out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie&quot;));
//out.write(System.getProperty(&quot;line.separator&quot;));
//out.close();
//fstream.close();


props.put(&quot;sessionValue1&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
props.put(&quot;sessionValueSid1&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue1&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;));

//String details = vars.get(&quot;cookie_value&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
//System.out.println(&quot;The session post value&quot;+sessionPostValue);



import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue1&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);


</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="0"></stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">10000</stringProp>
        </TestAction>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="jp@gc - Ultimate Thread Group- Status- New" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1851902044">
            <stringProp name="478152815">${__evalVar(NUM_USERS)}</stringProp>
            <stringProp name="1629">30</stringProp>
            <stringProp name="1660">40</stringProp>
            <stringProp name="-1857560941">${TEST_DURATION}</stringProp>
            <stringProp name="50547">300</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">120000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.CloseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.CloseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.CloseWebSocketSampler" testname="WebSocket Close" enabled="false">
            <stringProp name="statusCode">1000</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
          </eu.luminis.jmeter.wssampler.CloseWebSocketSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - main" enabled="true">
            <stringProp name="IfController.condition">&quot;${status_ws_connected}&quot;==&quot;false&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">./${CREDENTIALS_CSV}</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">username,password</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var startTimeStatus = ${__time(/1000,)};
vars.put(&quot;status_start_time1&quot;, String.valueOf(startTimeStatus));

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="Open Status WebSocket Sampler - ${__threadNum}" enabled="true">
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server">${HOST}</stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path">/api/${api_ver}/status?metric_id__in=1667,1701,2516,1675,1676,1677,1678&amp;element_id__in=${all_terminal_obj_ids}&amp;timestamp__gte=${status_start_time1}&amp;stream=true&amp;batch=true&amp;latestStatus=true</stringProp>
              <stringProp name="readTimeout">120000</stringProp>
              <stringProp name="connectTimeout">100000</stringProp>
            </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();

//Cookie cookie = new Cookie(&quot;Cookie&quot;,props.get(&quot;sid&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0)
//manager.add(cookie);

import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;,props.get(&quot;sid1&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0);
manager.add(cookie);

//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();
//manager.add(props.get(&quot;sid&quot;));
//Cookie cookie1 = new Cookie(&quot;vwo_logged_in&quot;,props.get(&quot;MyCookie1&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie1);
//Cookie cookie2 = new Cookie(&quot;vwola&quot;,props.get(&quot;MyCookie2&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie2);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();

Cookie cookie = new Cookie(&quot;Cookie&quot;,props.get(&quot;sid&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0)
manager.add(cookie);
//Cookie cookie1 = new Cookie(&quot;vwo_logged_in&quot;,props.get(&quot;MyCookie1&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie1);
//Cookie cookie2 = new Cookie(&quot;vwola&quot;,props.get(&quot;MyCookie2&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie2);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Status Open WebSocket  PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">

if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
     prev.setSuccessful(false);
     vars.put(&quot;status_ws_connected&quot;,&quot;false&quot;);
}
if (prev.getResponseCode().equals(&quot;101&quot;)) {
     vars.put(&quot;status_ws_connected&quot;,&quot;true&quot;);
}
if (prev.getResponseMessage().equals(&quot;Close&quot;)) {
     vars.put(&quot;connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}

if (${DEBUG_FLAG} == true){
	log.info(&quot;GET RESPONSE MESSAGE&gt;&gt;&gt;&gt;&quot;+prev.getResponseMessage());
}
var start_time =  ${__time(/1000,)};
vars.put(&quot;status_start_time&quot;, String.valueOf(start_time));
vars.put(&quot;run_status_ping_pong_sampler&quot;, &quot;false&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();

//Cookie cookie = new Cookie(&quot;Cookie&quot;,props.get(&quot;sid&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0)
//manager.add(cookie);

import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;,props.get(&quot;sid1&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0);
manager.add(cookie);

//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();
//manager.add(props.get(&quot;sid&quot;));
//Cookie cookie1 = new Cookie(&quot;vwo_logged_in&quot;,props.get(&quot;MyCookie1&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie1);
//Cookie cookie2 = new Cookie(&quot;vwola&quot;,props.get(&quot;MyCookie2&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie2);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();

Cookie cookie = new Cookie(&quot;sid&quot;,props.get(&quot;sid&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0)
manager.add(cookie);
//Cookie cookie1 = new Cookie(&quot;vwo_logged_in&quot;,props.get(&quot;MyCookie1&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie1);
//Cookie cookie2 = new Cookie(&quot;vwola&quot;,props.get(&quot;MyCookie2&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie2);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <kg.apc.jmeter.modifiers.FifoPopPreProcessor guiclass="kg.apc.jmeter.modifiers.FifoPopPreProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPopPreProcessor" testname="jp@gc - Inter-Thread Communication PreProcessor" enabled="false">
                <stringProp name="Timeout"></stringProp>
                <stringProp name="Variable">sid2</stringProp>
                <stringProp name="FifoName">SYNC_FIFO</stringProp>
              </kg.apc.jmeter.modifiers.FifoPopPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">

//props.put(&quot;sessionValue1&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionValueSid1&quot;, &quot;sid=::&quot;+ vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionPostValue1&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;cookiepresent&quot;, ${COOKIE_sid});

//String details = vars.get(&quot;cookie_value&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
//System.out.println(&quot;The session post value&quot;+sessionPostValue);

//log.info(&quot;Cookie value&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+${COOKIE_}+props.get(&quot;sessionValue1&quot;));

import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy;
HTTPSamplerProxy sampler = ctx.getCurrentSampler();

import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, vars.get(&quot;sessionPostValue1&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);

//props.put(&quot;sessionCookiePost&quot;, ${Cookie_}+&quot;::&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;))

//Cookie cookie1 = new Cookie(&quot;SERVERID&quot;, serv1, &quot;${HOST}&quot;, &quot;/&quot;, false, 0)
//manager.add(cookie1)

</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <kg.apc.jmeter.modifiers.FifoPopPreProcessor guiclass="kg.apc.jmeter.modifiers.FifoPopPreProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPopPreProcessor" testname="jp@gc - Inter-Thread Communication PreProcessor" enabled="false">
                <stringProp name="Timeout"></stringProp>
                <stringProp name="Variable">sid1</stringProp>
                <stringProp name="FifoName">SYNC_FIFO</stringProp>
              </kg.apc.jmeter.modifiers.FifoPopPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">props.put(&quot;SID&quot;, vars.get(&quot;sid1&quot;));



FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results12.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get Config - Global AUTH cookie" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
CookieManager manager = ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">SamplerJSONResult_errors</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;errors\\&quot;:(\[\]|\[.*\])</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">[]</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Cookie" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">Thread_WS_Cookie4</stringProp>
                <stringProp name="RegexExtractor.regex">cookie: sid=::([A-Za-z0-9].*::[A-Za-z0-9].*?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">if (${DEBUG_FLAG} == true){
	log.info(&quot;The ALARMS NEW COOKIE IS&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+vars.get(&quot;Thread_WS_Cookie4&quot;));
}
if ( vars.get(&quot;Thread_WS_Cookie4&quot;).length == 0){
	vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;)
}

props.put(&quot;sessionValue4&quot;, vars.get(&quot;Thread_WS_Cookie4&quot;));
props.put(&quot;sessionValueSid4&quot;, vars.get(&quot;Thread_WS_Cookie4&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue4&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie4&quot;));
props.put(&quot;sessionPostSidValue4&quot;, &quot;sid=::&quot;+vars.get(&quot;Thread_WS_Cookie4&quot;));

//props.put(&quot;sessionCookieValue1&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;))



import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue4&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);


//FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results123.csv&quot;,true);
//BufferedWriter out = new BufferedWriter(fstream);
//out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie4&quot;));
//out.write(System.getProperty(&quot;line.separator&quot;));
//out.close();
//fstream.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Main HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Use-Cookie</stringProp>
                    <stringProp name="Header.value">true</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;-${__threadNum}-${username}</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${status_ws_connected}&quot;==&quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="Read Status WebSocket Sampler - ${__threadNum}-${__V(Thread_WS_Cookie4)}" enabled="true">
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server"></stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path"></stringProp>
              <boolProp name="binaryPayload">false</boolProp>
              <boolProp name="createNewConnection">false</boolProp>
              <boolProp name="optional">true</boolProp>
              <stringProp name="readTimeout">120000</stringProp>
              <stringProp name="connectTimeout">20000</stringProp>
              <stringProp name="dataType">Text</stringProp>
            </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();

//Cookie cookie = new Cookie(&quot;Cookie&quot;,props.get(&quot;sid&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0)
//manager.add(cookie);

import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;,props.get(&quot;sid1&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0);
manager.add(cookie);

//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();
//manager.add(props.get(&quot;sid&quot;));
//Cookie cookie1 = new Cookie(&quot;vwo_logged_in&quot;,props.get(&quot;MyCookie1&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie1);
//Cookie cookie2 = new Cookie(&quot;vwola&quot;,props.get(&quot;MyCookie2&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie2);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();

Cookie cookie = new Cookie(&quot;Cookie&quot;,props.get(&quot;sid&quot;),&quot;${HOST}&quot;,&quot;/&quot;,false,0)
manager.add(cookie);
//Cookie cookie1 = new Cookie(&quot;vwo_logged_in&quot;,props.get(&quot;MyCookie1&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie1);
//Cookie cookie2 = new Cookie(&quot;vwola&quot;,props.get(&quot;MyCookie2&quot;),&quot;vwo.com&quot;,&quot;/&quot;,false,0);
//manager.add(cookie2);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">SamplerJSONResult_errors</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;errors\\&quot;:(\[\]|\[.*\])</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">[]</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Status Read WebSocket  PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//Alarms Read WebSocket PostProcessor

if (prev.getResponseCode().equals(&quot;500&quot;)) {
     vars.put(&quot;status_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;502&quot;)) {
     vars.put(&quot;status_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;503&quot;)) {
     vars.put(&quot;status_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseMessage().equals(&quot;Close&quot;)) {
     vars.put(&quot;status_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}


if (prev.getResponseCode().equals(&quot;Websocket error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
	     prev.setSuccessful(false);
	} else {
		vars.put(&quot;status_ws_connected&quot;,&quot;true&quot;);
	}
}
if (prev.getResponseCode().equals(&quot;Websocket I/O error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;)) {
	     prev.setSuccessful(true);
	} else {
		vars.put(&quot;status_ws_connected&quot;,&quot;true&quot;);
	}
	prev.setSuccessful(true);
	vars.put(&quot;status_ws_connected&quot;,&quot;true&quot;);
}

log.info( &quot;The response code for status is given by&gt;&gt;&gt;&gt;&gt;&quot; + prev.getResponseCode());

if (prev.getResponseCode().equals(&quot;Sampler error&quot;)) {
//Response code: Sampler error
//Response message: Sampler configured for using existing connection, but there is no connection
		vars.put(&quot;status_ws_connected&quot;,&quot;true&quot;);
		prev.setSuccessful(true);
}

if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
     prev.setSuccessful(true);
     vars.put(&quot;status_ws_connected&quot;,&quot;true&quot;);
}

var currTime = ${__time(/1000,)};
var startTime = Integer.parseInt(vars.get(&quot;status_start_time&quot;));
var startTimeAlarms = Integer.parseInt(vars.get(&quot;status_start_time1&quot;));



//Have the slot time 

log.info(&quot;TEST DURATION GIVEN AS&quot;+vars.get(&quot;TEST_DURATION&quot;));
log.info(&quot;CURRENT TIME&quot;+${__javaScript(${__time(,)} / 1000,)});
log.info(&quot;TIME GIVEN&quot;+(currTime - startTimeAlarms));

if( (currTime - startTime) &gt;= Integer.parseInt(vars.get(&quot;ping_pong_interval&quot;))) {
	log.info( &quot;ping_pong_interval period exceeded for status : &quot; + String.valueOf(currTime - startTime) );
	vars.put (&quot;run_status_ping_pong_sampler&quot;, &quot;true&quot;);
	//Reset Start Time to currTime
	vars.put(&quot;status_start_time&quot;, String.valueOf(currTime));
} else {
	vars.put (&quot;run_status_ping_pong_sampler&quot;, &quot;false&quot;);
}

//if ( vars.get(&quot;TEST_DURATION&quot;).equals(&quot;21600&quot;)){
//	log.info(&quot;INSIDE THE IF CONDITION FOR 6 HOURS.......&quot;);
//	for (int i=0; i&lt; = 24; i++ ){
//		//if ( (i % 2 == 0) || (i ==1)  ){
//			if ((currTime - startTimeAlarms) == 900 * i ){
//				vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;);
//			}
		//}
//	}
//} else {
//    log.info(&quot;INSIDE THE ELSW CONDITION FOR &lt; 6 HOURS.......&quot;);
//    vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;);
//}
//log.info(&quot;THE INITIAL COMMAND EXECUTION&quot;+vars.get(initial_command_execution));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor status main" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper;

def jsonSlurper = new JsonSlurper();
if(prev.getResponseCode().equals(&quot;200&quot;) ){
	def response = jsonSlurper.parseText(prev.getResponseDataAsString());
	def payload = jsonSlurper.parseText(response.payload);
	int record_count = Integer.parseInt(props.get(&quot;status_records_count_thread_&quot; + ${__threadNum}));
	record_count += 1;
	props.put(&quot;status_records_count_thread_&quot; + ${__threadNum}, String.valueOf(record_count));
}

</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Main HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Use-Cookie</stringProp>
                    <stringProp name="Header.value">true</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;-${__threadNum}-${username}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//props.put(&quot;sessionCookieValue&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie2&quot;))

//FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results123.csv&quot;,true);
//BufferedWriter out = new BufferedWriter(fstream);
//out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;));
//out.write(System.getProperty(&quot;line.separator&quot;));
//out.close();
//fstream.close();

var currTimeNew = ${__time(/1000,)};
var startTimeNew = Integer.parseInt(vars.get(&quot;status_start_time1&quot;));

log.info(&quot;The current time value is: ${starttime_value}&quot;);

//props.put(&quot;sessionCookieValue&quot;, vars.get(&quot;Thread_WS_Cookie2&quot;))

//if ( vars.get(&quot;test_duration_1&quot;).equals(&quot;300&quot;)){
log.info(&quot;INSIDE THE IF CONDITION FOR 6 HOURS.......&quot;);
//for (int i=0; i&lt; = 24; i++ ){
//if ( (i % 2 == 0) || (i ==1)  ){

//var test_duration = ${TEST_DURATION} - 100
//var timePresent = Integer.parseInt(vars.get(&quot;TEST_DURATION&quot;)) - 100

log.info(&quot;The test duration=============&quot;+${TEST_DURATION});
log.info( &quot;In current new and start new : &quot; + String.valueOf(currTimeNew - startTimeNew));

if ((currTimeNew - startTimeNew) &gt;= ${TEST_DURATION} - 600){
	     log.info(&quot;INSIDE THE IF CONDITION FOR TIME COMPARISION....&quot;);
		vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;);
		vars.put(&quot;end_test&quot;, &quot;true&quot;);
	}
		//}

//} else {
//    log.info(&quot;INSIDE THE ELSW CONDITION FOR &lt; 6 HOURS.......&quot;);
//    vars.put(&quot;initial_command_execution&quot;,&quot;true&quot;);
//}
log.info(&quot;THE INITIAL COMMAND EXECUTION&quot;+vars.get(initial_command_execution));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <eu.luminis.jmeter.wssampler.CloseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.CloseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.CloseWebSocketSampler" testname="WebSocket Close" enabled="false">
              <stringProp name="statusCode">1000</stringProp>
              <stringProp name="readTimeout">6000</stringProp>
            </eu.luminis.jmeter.wssampler.CloseWebSocketSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Post to have a logout-Status - ${__threadNum}" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;session_id&quot; : &quot;${__P(sessionPostValue4)}&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port">80</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/1.0/core/logout</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">120000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">120000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);

//props.put(&quot;sessionValue2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
//props.put(&quot;sessionValueSid2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue4&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie4&quot;));



//log.info(&quot;THE SESSION VALUE........&quot;+vars.get(&quot;cookie_value&quot;))
log.info(&quot;.&quot;+vars.get(&quot;Thread_WS_Cookie4&quot;));

//props.put(&quot;sessionCookieValue2&quot;, &quot;::&quot;+${COOKIE_}+props.get(&quot;sessionCookieValue1&quot;))


import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue4&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);

//System.out.println(&quot;Cookie value&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+${COOKIE_}+props.get(&quot;sessionValue1&quot;));

vars.put(&quot;status_ws_connected&quot;, &quot;false&quot;)</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Use-Cookie</stringProp>
                    <stringProp name="Header.value">false</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">${__P(sessionPostSidValue4)}</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">if (prev.getResponseCode().equals(&quot;502&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;500&quot;)) {
     vars.put(&quot;stats_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(true);
}


vars.put(&quot;status_ws_connected&quot;, &quot;false&quot;)</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">3000</stringProp>
            </TestAction>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">10000</stringProp>
            </TestAction>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
              <stringProp name="IfController.condition">&quot;${initial_command_execution}&quot;==&quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                <stringProp name="filename">C:/Users/akarthik/results123.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">cookie, cookie_value</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.thread</stringProp>
              </CSVDataSet>
              <hashTree/>
              <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
                <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
              </CriticalSectionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Post to have a logout-Status - ${__threadNum}-${__P(sessionPostValue4)}" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;session_id&quot; : &quot;${__P(sessionPostValue4)}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port">80</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/2.0/config/logout</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout">120000</stringProp>
                  <stringProp name="HTTPSampler.response_timeout">120000</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);

//props.put(&quot;sessionValue&quot;, vars.get(&quot;Thread_WS_Cookie4&quot;));
//props.put(&quot;sessionValueSid2&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue4&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie4&quot;));



//log.info(&quot;THE SESSION VALUE........&quot;+vars.get(&quot;cookie_value&quot;))
log.info(&quot;.&quot;+vars.get(&quot;Thread_WS_Cookie4&quot;));

//props.put(&quot;sessionCookieValue2&quot;, &quot;::&quot;+${COOKIE_}+props.get(&quot;sessionCookieValue1&quot;))


import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue4&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);

//System.out.println(&quot;Cookie value&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+${COOKIE_}+props.get(&quot;sessionValue1&quot;));

//vars.put(&quot;status_ws_connected&quot;, &quot;false&quot;)</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Use-Cookie</stringProp>
                        <stringProp name="Header.value">true</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">if (prev.getResponseCode().equals(&quot;502&quot;)) {
     vars.put(&quot;status_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;500&quot;) || prev.getResponseCode().equals(&quot;204&quot;)) {
     //vars.put(&quot;status_ws_connected&quot;,&quot;false&quot;);
     vars.put(&quot;end_test&quot;, &quot;true&quot;);
     prev.setSuccessful(true);
}

vars.put(&quot;end_test&quot;, &quot;true&quot;);
//vars.put(&quot;status_ws_connected&quot;, &quot;false&quot;)</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.scope">all</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="false">
                    <doubleProp>
                      <name>throughput</name>
                      <value>30.0</value>
                      <savedValue>0.0</savedValue>
                    </doubleProp>
                    <intProp name="calcMode">0</intProp>
                  </ConstantThroughputTimer>
                  <hashTree/>
                  <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="false">
                    <doubleProp>
                      <name>allowedThroughputSurplus</name>
                      <value>1.0</value>
                      <savedValue>0.0</savedValue>
                    </doubleProp>
                    <intProp name="batchSize">10</intProp>
                    <intProp name="batchThreadDelay">2000</intProp>
                    <longProp name="duration">3600</longProp>
                    <intProp name="exactLimit">10000</intProp>
                    <longProp name="randomSeed">0</longProp>
                    <doubleProp>
                      <name>throughput</name>
                      <value>100.0</value>
                      <savedValue>0.0</savedValue>
                    </doubleProp>
                    <intProp name="throughputPeriod">3600</intProp>
                  </PreciseThroughputTimer>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                    <stringProp name="RandomTimer.range">5000.0</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                  <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                    <collectionProp name="CookieManager.cookies"/>
                    <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                    <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
                    <stringProp name="CookieManager.policy">standard-strict</stringProp>
                  </CookieManager>
                  <hashTree/>
                  <PoissonRandomTimer guiclass="PoissonRandomTimerGui" testclass="PoissonRandomTimer" testname="Poisson Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">2000</stringProp>
                    <stringProp name="RandomTimer.range">100</stringProp>
                  </PoissonRandomTimer>
                  <hashTree/>
                </hashTree>
                <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="false"/>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${end_test}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                <intProp name="ActionProcessor.action">2</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">2000</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Run PingPong" enabled="true">
            <stringProp name="IfController.condition">&quot;${run_status_ping_pong_sampler}&quot;==&quot;true&quot; || &quot;${enable_ping_pong}&quot;==&quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <eu.luminis.jmeter.wssampler.PingPongSampler guiclass="eu.luminis.jmeter.wssampler.PingPongSamplerGui" testclass="eu.luminis.jmeter.wssampler.PingPongSampler" testname="WebSocket Ping/Pong for Status-${__V(Thread_WS_Cookie4)}" enabled="true">
              <stringProp name="type">Pong</stringProp>
              <stringProp name="readTimeout">100000</stringProp>
            </eu.luminis.jmeter.wssampler.PingPongSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//Alarms Read WebSocket PostProcessor

if (prev.getResponseCode().equals(&quot;500&quot;)) {
     vars.put(&quot;status_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;502&quot;)) {
     vars.put(&quot;status_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseCode().equals(&quot;503&quot;)) {
     vars.put(&quot;status_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseMessage().equals(&quot;Close&quot;)) {
     vars.put(&quot;status_ws_connected&quot;,&quot;false&quot;);
     prev.setSuccessful(false);
}
if (prev.getResponseMessage().equals(&quot;200&quot;)) {
     vars.put(&quot;status_ws_connected&quot;,&quot;true&quot;);
     prev.setSuccessful(true);
}

if (prev.getResponseCode().equals(&quot;Websocket error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
	     prev.setSuccessful(true);
	} else {
		vars.put(&quot;status_ws_connected&quot;,&quot;false&quot;);
	}
}
if (prev.getResponseCode().equals(&quot;Websocket I/O error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;)) {
	     prev.setSuccessful(true);
	} else {
		vars.put(&quot;status_ws_connected&quot;,&quot;false&quot;);
	}
	prev.setSuccessful(true);
	//vars.put(&quot;status_ws_connected&quot;,&quot;false&quot;);
}

log.info( &quot;The response code for status is given by&gt;&gt;&gt;&gt;&gt;&quot; + prev.getResponseCode());

if (prev.getResponseCode().equals(&quot;Sampler error&quot;)) {
//Response code: Sampler error
//Response message: Sampler configured for using existing connection, but there is no connection
		//vars.put(&quot;status_ws_connected&quot;,&quot;false&quot;);
		prev.setSuccessful(true);
		vars.put(&quot;status_ws_connected&quot;,&quot;false&quot;);
}

if (prev.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;)) {
     prev.setSuccessful(true);
     vars.put(&quot;status_ws_connected&quot;,&quot;false&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="Runtime Controller" enabled="false">
          <stringProp name="RunTime.seconds">${TEST_DURATION}</stringProp>
        </RunTime>
        <hashTree>
          <eu.luminis.jmeter.wssampler.TextFrameFilter guiclass="eu.luminis.jmeter.wssampler.TextFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.TextFrameFilter" testname="WebSocket Text Frame Filter" enabled="true">
            <stringProp name="comparisonType">Contains</stringProp>
            <stringProp name="matchValue">User session</stringProp>
          </eu.luminis.jmeter.wssampler.TextFrameFilter>
          <hashTree/>
        </hashTree>
        <BeanShellListener guiclass="TestBeanGUI" testclass="BeanShellListener" testname="Status WebSocket BeanShell Listener - ${__threadNum}" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">/* WS - Status - Calculate across all threads */

//Start of new PostProcesser
String res=sampleResult.getResponseCode();
String testType = &quot;ws_status_requests&quot;;
Map requests = new HashMap();
Long sys_failure_count=0;
Long failure_count=0;
Long requestSum = 0;
Long timeSum = 0;
Boolean Failure = false;

if (res.equals(&quot;101&quot;)) {
	if (!sampleResult.getResponseMessage().equals(&quot;Switching Protocols&quot;)) {
		sys_failure_count++;		
	}
} else if (!res.equals(&quot;200&quot;)) {
	//Ignore if it is a regular read tmieout...
	if (
		!sampleResult.getResponseMessage().equals(&quot;WebSocket error: java.net.SocketTimeoutException: Read timed out&quot;) &amp;&amp; 
		!sampleResult.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;) &amp;&amp;
		!sampleResult.getResponseMessage().equals(&quot;Read timeout, no response received.&quot;)
	   ) 
	{
		sys_failure_count++;		
	}
	//#TODOwhat about f (sampleResult.getResponseMessage().equals(&quot;Received: Close frame with status code 1000 and close reason \&apos;null\&apos;&quot;)) {
} else {

	String errors = vars.get(&quot;SamplerJSONResult_errors&quot;);

	if (errors != null &amp;&amp; !errors.equals(&quot;[]&quot;)) // When using Regular Expression Extractor
	{
		//Failure
		//log.error(&quot;WS Status - You had an error: &quot; + errors);
	     sampleResult.setResponseMessage(errors);
		Failure = true;
	     sampleResult.setSuccessful(false);
	}
     if (Failure) {
		failure_count++;
     }
}

if ( res.equals(&quot;200&quot;)) // || res.equals(&quot;101&quot;) ) 
{
	timeSum += sampleResult.getTime();
	requestSum++;
	Long average = timeSum / requestSum;
	bsh.shared.ws_status_avResp = average;
}

//String[] words = ${Thread_WS_Cookie2_${__threadNum}}.split(&quot;=&quot;);
//String sid = &quot;&quot;;
//String cookie_val = words[1];
//log.info(&quot;COOKIE VAL TEST&gt;&gt;&gt;&gt;&gt;&quot;+cookie_val);
//for (int i = 0; i &lt; words.length; i++) {
//  log.info(words[i]);
//  sid = &quot;sid=&quot;+ words[1];
//  log.info(&quot;The sid value is&quot;+sid);   
//}
//String var_name_cookie = sid;
//props.put(varNameCookie2, sid);
//props.put(cookieValue2, cookie_val);


requests.put(&quot;requestSum&quot;,String.valueOf(requestSum));
requests{&quot;timeSum&quot;}=String.valueOf(timeSum);
requests{&quot;failureSum&quot;}=String.valueOf(failure_count);
requests{&quot;sysFailureSum&quot;}=String.valueOf(sys_failure_count);
props.put(testType, requests);</stringProp>
        </BeanShellListener>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.PingFrameFilter guiclass="eu.luminis.jmeter.wssampler.PingFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.PingFrameFilter" testname="WebSocket Ping/Pong Frame Filter" enabled="true">
          <boolProp name="replyToPing">true</boolProp>
          <stringProp name="filterType">FilterAll</stringProp>
        </eu.luminis.jmeter.wssampler.PingFrameFilter>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.TextFrameFilter guiclass="eu.luminis.jmeter.wssampler.TextFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.TextFrameFilter" testname="WebSocket Text Frame Filter" enabled="true">
          <stringProp name="comparisonType">Contains</stringProp>
          <stringProp name="matchValue">Sampler error: unexpected frame type (close)</stringProp>
        </eu.luminis.jmeter.wssampler.TextFrameFilter>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - Get Element List-Status-${__threadNum}" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
              <elementProp name="obj_name__contains" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${TERM_NAME_PREFIX}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">obj_name__contains</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/1.0/config/element/terminal</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Main HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Use-Cookie</stringProp>
                <stringProp name="Header.value">true</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;</stringProp>
              </elementProp>
              <elementProp name="Cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">${__P(sessionPostSidValue4)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Config - JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">obj_id_list2</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..obj_id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get Config - Object List" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//Initial Get Config Post Processor
String myObj = &quot;${obj_id_list2}&quot;; 
String trimmed_myObj=myObj.substring(1,(myObj.length()-1));

bsh.shared.objList = myObj;
props.put(&quot;OBJECT_LIST&quot;, myObj);

String STATS_METRIC_LIST =(&quot;2241,2242,1064,1065,1066,1067,2318,2321,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,2322,1098,2323,2324,2243,1101,1102,1103,1104,1105,1106,1107,1108,1109,1111,1112,1113,1114,1115,1117,1118,1119,1120,1121,1129,1130,1131,1132,1138,1690,1140,1141,1142,2279,1703,1146,1705,2239,1681,1148,1149,1159,1160,1710,1711,2430,1693,2355,1277,1279,2432,2328,1316,1317,1318,1319,1320&quot;); 
String[] metricArray = STATS_METRIC_LIST.split(&quot;,&quot;);
StringBuilder sbStr = new StringBuilder();
Integer metricCnt = Integer.parseInt(vars.get(&quot;NUM_STATS_METRICS&quot;));
for (int i = 0, il = Math.min(metricCnt,metricArray.length); i &lt; il; i++) {
    if (i &gt; 0)
        sbStr.append(&quot;,&quot;);
    sbStr.append(metricArray[i]);
}
props.put(&quot;vars_metric_list_stats&quot;,sbStr.toString());
//vars.put(&quot;vars_metric_list_stats&quot;,sbStr.toString());

String STATUS_METRIC_LIST =(&quot;1667,1701,2516,1675,1676,1677,1678&quot;);
metricArray = STATUS_METRIC_LIST.split(&quot;,&quot;);
sbStr = new StringBuilder();
metricCnt = Integer.parseInt(vars.get(&quot;NUM_STATUS_METRICS&quot;));
for (int i = 0, il = Math.min(metricCnt,metricArray.length); i &lt; il; i++) {
    if (i &gt; 0)
        sbStr.append(&quot;,&quot;);
    sbStr.append(metricArray[i]);
}
props.put(&quot;vars_metric_list_status&quot;,sbStr.toString());
//vars.put(&quot;vars_metric_list_status&quot;,sbStr.toString());


</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get Config - Global AUTH cookie" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
CookieManager manager = ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">code</stringProp>
            <stringProp name="RegexExtractor.refname">SamplerJSONResult_errors</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;errors\\&quot;:(\[\]|\[.*\])</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">[]</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Cookie" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">Thread_WS_Cookie10</stringProp>
            <stringProp name="RegexExtractor.regex">Set-Cookie: sid=::([A-Za-z0-9].*::[A-Za-z0-9].*);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">log.info(&quot;The Thread value given as cookie 2...................&quot;+vars.get(&quot;Thread_WS_Cookie10&quot;));

vars.put(&quot;sid1&quot;, &quot;sid=::&quot;+ vars.get(&quot;Thread_WS_Cookie10&quot;)+ &quot;;&quot;);
log.info(&quot;THE SAID VALUE IS&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;+vars.get(&quot;sid1&quot;));


</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">${__setProperty(cookie_orig,${Thread_WS_Cookie10})};

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">

//props.put(&quot;sessionValue1&quot;, vars.get(&quot;cookie_value&quot;));
//props.put(&quot;sessionValueSid1&quot;, vars.get(&quot;cookie_value&quot;) + &quot;;&quot;);
//props.put(&quot;sessionPostValue1&quot;, &quot;::&quot;+vars.get(&quot;cookie_value&quot;));

//String details = vars.get(&quot;cookie_value&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
//System.out.println(&quot;The session post value&quot;+sessionPostValue);



//import org.apache.jmeter.protocol.http.control.CookieManager;
//import org.apache.jmeter.protocol.http.control.Cookie;
//CookieManager manager = sampler.getCookieManager();
//Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue1&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
//manager.add(cookie);

//Cookie cookie1 = new Cookie(&quot;SERVERID&quot;, serv1, &quot;${HOST}&quot;, &quot;/&quot;, false, 0)
//manager.add(cookie1)

props.put(&quot;sessionValue1&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;));
props.put(&quot;sessionValueSid1&quot;, vars.get(&quot;Thread_WS_Cookie1&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue1&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie1&quot;));

//String details = vars.get(&quot;cookie_value&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
//System.out.println(&quot;The session post value&quot;+sessionPostValue);



import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue1&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">props.put(&quot;SID&quot;, vars.get(&quot;sid1&quot;));



//FileWriter fstream = new FileWriter(&quot;C:/Users/akarthik/results12.csv&quot;,true);
//BufferedWriter out = new BufferedWriter(fstream);
//out.write(&quot;sid&quot;+&quot;,&quot;+vars.get(&quot;Thread_WS_Cookie&quot;));
//out.write(System.getProperty(&quot;line.separator&quot;));
//out.close();
//fstream.close();


props.put(&quot;sessionValue1&quot;, vars.get(&quot;Thread_WS_Cookie10&quot;));
props.put(&quot;sessionValueSid1&quot;, vars.get(&quot;Thread_WS_Cookie10&quot;) + &quot;;&quot;);
props.put(&quot;sessionPostValue1&quot;, &quot;::&quot;+vars.get(&quot;Thread_WS_Cookie10&quot;));

//String details = vars.get(&quot;cookie_value&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
//System.out.println(&quot;The session post value&quot;+sessionPostValue);



import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue1&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);


</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="0"></stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <kg.apc.jmeter.modifiers.FifoPopPreProcessor guiclass="kg.apc.jmeter.modifiers.FifoPopPreProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPopPreProcessor" testname="jp@gc - Inter-Thread Communication PreProcessor" enabled="false">
          <stringProp name="Timeout">10</stringProp>
          <stringProp name="Variable">${sid5}</stringProp>
          <stringProp name="FifoName">SYNC_FIFO</stringProp>
        </kg.apc.jmeter.modifiers.FifoPopPreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Post to have a logout-Stats" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;session_id&quot; : &quot;${__P(sessionPostValue5)}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/1.0/core/logout</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">120000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">120000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Use-Cookie</stringProp>
                <stringProp name="Header.value">true</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">jMeter &lt;SDT.Support@idirect.net&gt;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">

//props.put(&quot;sessionValue&quot;, vars.get(&quot;cookie_value&quot;));
props.put(&quot;sessionValueSid&quot;, vars.get(&quot;&quot;) + &quot;;&quot;);
//props.put(&quot;sessionPostValue&quot;, &quot;::&quot;+vars.get(&quot;cookie_value&quot;));

//String details = vars.get(&quot;cookie_value&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;);
//System.out.println(&quot;The session post value&quot;+sessionPostValue);



import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager manager = sampler.getCookieManager();
Cookie cookie = new Cookie(&quot;sid&quot;, props.get(&quot;sessionPostValue5&quot;),&quot;${HOST}&quot;,&quot;/&quot;, false,0);
manager.add(cookie);

//Cookie cookie1 = new Cookie(&quot;SERVERID&quot;, serv1, &quot;${HOST}&quot;, &quot;/&quot;, false, 0)
//manager.add(cookie1)

</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler-for_logout" enabled="true">
          <stringProp name="BeanShellSampler.query">import groovy.json.JsonBuilder;

builder = new JsonBuilder();

Map requests = new HashMap();
Map alarms = new HashMap();
Map events = new HashMap();
Map stats = new HashMap();
Map status = new HashMap();


ArrayList myList = new ArrayList();
myList.add(&quot;alarm&quot;);
myList.add(&quot;event&quot;);
myList.add(&quot;stats&quot;);
myList.add(&quot;status&quot;);

//props.put(myListType, 4);

for(j = 0 ; j &lt; myList.size(); j++ )
{
	log.info(myList.get(j));
	for (i = 0 ; i &lt; ${NUM_USERS}; i++) {
		key = myList.get(j) + &quot;_records_count_thread_&quot; + String.valueOf(i + 1);
		
		value = props.get(key);
		if(myList.get(j) == &quot;alarm&quot;){
			alarms.put(key, value);
				
		} else if (myList.get(j) == &quot;event&quot;) {
			events.put(key, value);
				
		} else if (myList.get(j) == &quot;stats&quot;) {
			stats.put(key, value);
				
		} else if (myList.get(j) == &quot;status&quot;) {
			status.put(key, value);
				
		}
		
	}
}

requests.put(&quot;alarms&quot;, alarms);
requests.put(&quot;events&quot;, events);
requests.put(&quot;stats&quot;, stats);
requests.put(&quot;status&quot;, status);

builder.call(requests);

//String session_id = ${cookieValue};
//props.put(sessionIdValue, session_id);

FileWriter f = new FileWriter(&quot;ws_records_count.json&quot;);
BufferedWriter out = new BufferedWriter(f);
out.write(builder.toPrettyString());
out.close();
f.close();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Kill All Tests" enabled="true">
          <intProp name="ActionProcessor.action">2</intProp>
          <intProp name="ActionProcessor.target">2</intProp>
          <stringProp name="ActionProcessor.duration"></stringProp>
        </TestAction>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">2</intProp>
          <intProp name="ActionProcessor.target">2</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">testResults_${build_number}.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseCodesPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Codes per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>true</latency>
            <timestamp>false</timestamp>
            <success>true</success>
            <label>false</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">testResults_${build_number}.xml</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">testResults_${build_number}.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.reporters.FlexibleFileWriter guiclass="kg.apc.jmeter.reporters.FlexibleFileWriterGui" testclass="kg.apc.jmeter.reporters.FlexibleFileWriter" testname="jp@gc - Flexible File Writer" enabled="true">
        <stringProp name="filename">testResults_${build_number}.txt</stringProp>
        <stringProp name="columns">endTimeMillis|\t|responseTime|\t|latency|\t|sampleLabel|\t|threadName|\t|sentBytes|\t|receivedBytes|\t|isSuccessful|\t|requestData|\t|responseData|\t|responseCode|\t|responseHeaders|\t|responseMessage|\r\n</stringProp>
        <boolProp name="overwrite">true</boolProp>
        <stringProp name="header">endTimeMillis	responseTime	latency sampleLabel threadName sentBytes	receivedBytes	isSuccessful    requestData responseData responseCode     responseHeaders responseMessage
</stringProp>
        <stringProp name="footer"></stringProp>
      </kg.apc.jmeter.reporters.FlexibleFileWriter>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">C:\Users\akarthik\Desktop\testResults.jtl</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
