<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Sockio Client" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="CREDENTIALS_CSV" elementType="Argument">
            <stringProp name="Argument.name">CREDENTIALS_CSV</stringProp>
            <stringProp name="Argument.value">${__P(CREDENTIALS_CSV,multiuser_credentials.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NUM_USERS" elementType="Argument">
            <stringProp name="Argument.name">NUM_USERS</stringProp>
            <stringProp name="Argument.value">${__P(NUM_USERS,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">${__P(HOST,172.17.230.6)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="api_ver" elementType="Argument">
            <stringProp name="Argument.name">api_ver</stringProp>
            <stringProp name="Argument.value">${__P(API_VER,1.1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="enable_ping_pong" elementType="Argument">
            <stringProp name="Argument.name">enable_ping_pong</stringProp>
            <stringProp name="Argument.value">${__P(enable_ping_pong,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ping_pong_interval" elementType="Argument">
            <stringProp name="Argument.name">ping_pong_interval</stringProp>
            <stringProp name="Argument.value">${__P(ping_pong_interval,30)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="initial_command_execution" elementType="Argument">
            <stringProp name="Argument.name">initial_command_execution</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_DURATION" elementType="Argument">
            <stringProp name="Argument.name">TEST_DURATION</stringProp>
            <stringProp name="Argument.value">${__P(TEST_DURATION,300)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ALL_TERMINALS" elementType="Argument">
            <stringProp name="Argument.name">ALL_TERMINALS</stringProp>
            <stringProp name="Argument.value">${__P(all_terminal_obj_ids,520618)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NUM_OF_TABS" elementType="Argument">
            <stringProp name="Argument.name">NUM_OF_TABS</stringProp>
            <stringProp name="Argument.value">${__P(NUM_OF_TABS,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CLOSE_TIMEOUT" elementType="Argument">
            <stringProp name="Argument.name">CLOSE_TIMEOUT</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sockio_reconnect" elementType="Argument">
            <stringProp name="Argument.name">sockio_reconnect</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="build_number" elementType="Argument">
            <stringProp name="Argument.name">build_number</stringProp>
            <stringProp name="Argument.value">${__P(buildNumber,123)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Delete cookie file" enabled="false">
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">import org.apache.jmeter.services.FileServer;

File file1 = new File(&quot;starttime1234.csv&quot;);
if (!file1.exists()) {
	file1.createNewFile();
}

</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223PreProcessor>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">${CREDENTIALS_CSV}</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">username,password</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Get Config - HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">http://${HOST}</stringProp>
            <stringProp name="Authorization.username">${username}</stringProp>
            <stringProp name="Authorization.password">${password}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Get Config - Get Necessary Variables" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">import org.apache.commons.codec.binary.Base64;

byte[] encodedUsernamePassword = Base64.encodeBase64(&quot;${username}:${password}&quot;.getBytes());
vars.put(&quot;base64HeaderValue&quot;,new String(encodedUsernamePassword));
</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell determine timestamp" enabled="true">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">Long startTimeStats = ${__javaScript(Math.round(new Date().getTime() / 1000))};
//var startTime = ${__time(/1000,)};
vars.put(&quot;start_time1&quot;, String.valueOf(startTimeStats));

log.info(&quot;Start time value&quot;+vars.get(&quot;start_time1&quot;));

FileWriter fstream = new FileWriter(&quot;starttime1234.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;sid1&quot;+&quot;,&quot;+vars.get(&quot;start_time1&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Starttime thread group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Sockio Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${NUM_USERS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1500797093000</longProp>
        <longProp name="ThreadGroup.end_time">1500797093000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${TEST_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename">starttime1234.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">sid,startTimeValue</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${NUM_OF_TABS}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="obj_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">3054</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">obj_id</stringProp>
                  <stringProp name="HTTPArgument.content_type"></stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/2.0/config/terminal</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
                </elementProp>
                <elementProp name="Use-Cookie" elementType="Header">
                  <stringProp name="Header.name">Use-Cookie</stringProp>
                  <stringProp name="Header.value">true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract sid from http response" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">sid</stringProp>
              <stringProp name="RegexExtractor.regex">cookie: true=([^;]+); Path=/; HttpOnly</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">SamplerJSONResult_errors</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;errors\\&quot;:(\[\]|\[.*\])</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">[]</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Cookie" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">sid</stringProp>
              <stringProp name="RegexExtractor.regex">cookie: sid=::([A-Za-z0-9].*::[A-Za-z0-9].*?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">props.put(&quot;sidCookie&quot;, &quot;::&quot;+vars.get(&quot;sid&quot;));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WebSocket Open Connection-Sockio-${__threadNum}" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server">${HOST}</stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path">/socket.io/?EIO=3&amp;transport=websocket</stringProp>
            <stringProp name="connectTimeout">120000</stringProp>
            <stringProp name="readTimeout">600000</stringProp>
          </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sec-WebSocket-Extensions</stringProp>
                  <stringProp name="Header.value">x-webkit-deflate-frame</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="sid" elementType="Cookie" testname="sid">
                  <stringProp name="Cookie.value">${__P(sidCookie)}</stringProp>
                  <stringProp name="Cookie.domain"></stringProp>
                  <stringProp name="Cookie.path"></stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
              <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
            </CookieManager>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="Engine.IO upgrades-sockio-${__threadNum}" enabled="true">
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <boolProp name="binaryPayload">false</boolProp>
            <stringProp name="requestData">5</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Sockio Read PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//Read sockio 

if (prev.getResponseCode().equals(&quot;500&quot;)) {
     prev.setSuccessful(false);
}

if (prev.getResponseCode().equals(&quot;404&quot;)) {
     prev.setSuccessful(false);
}

if (prev.getResponseCode().equals(&quot;502&quot;)) {
     prev.setSuccessful(false);
}

if (prev.getResponseCode().equals(&quot;200&quot;)) {
     prev.setSuccessful(true);
}

if (prev.getResponseCode().equals(&quot;Websocket I/O error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;)) {
	     prev.setSuccessful(true);
	     vars.put(&quot;sockio_reconnect&quot;,&quot;true&quot;);
	}
	prev.setSuccessful(true);
	vars.put(&quot;sockio_reconnect&quot;,&quot;true&quot;);
	
}
if (prev.getResponseCode().equals(&quot;Sampler error&quot;)) {
//Response code: Sampler error
//Response message: Sampler configured for using existing connection, but there is no connection
		//vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
		prev.setSuccessful(true);
		vars.put(&quot;sockio_reconnect&quot;,&quot;true&quot;);
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="Engine.IO ping/pong-sockio-${__threadNum}" enabled="true">
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <boolProp name="binaryPayload">false</boolProp>
            <stringProp name="requestData">2probe</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Sockio Read PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//Read sockio 

if (prev.getResponseCode().equals(&quot;500&quot;)) {
     prev.setSuccessful(false);
}

if (prev.getResponseCode().equals(&quot;404&quot;)) {
     prev.setSuccessful(false);
}

if (prev.getResponseCode().equals(&quot;502&quot;)) {
     prev.setSuccessful(false);
}

if (prev.getResponseCode().equals(&quot;200&quot;)) {
     prev.setSuccessful(true);
}

if (prev.getResponseCode().equals(&quot;Websocket I/O error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;)) {
	     prev.setSuccessful(true);
	     vars.put(&quot;sockio_reconnect&quot;,&quot;true&quot;);
	}
	prev.setSuccessful(true);
	vars.put(&quot;sockio_reconnect&quot;,&quot;true&quot;);
	
}
if (prev.getResponseCode().equals(&quot;Sampler error&quot;)) {
//Response code: Sampler error
//Response message: Sampler configured for using existing connection, but there is no connection
		//vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
		prev.setSuccessful(true);
		vars.put(&quot;sockio_reconnect&quot;,&quot;true&quot;);
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="websocket  request- sessionID-Auth-sockio-${__threadNum}" enabled="true">
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <boolProp name="binaryPayload">false</boolProp>
            <stringProp name="requestData">42[&quot;authentication&quot;,{&quot;sessionId&quot;:&quot;${__P(sidCookie)}&quot;}]</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="websocket  request-SessionID-query-Sockio-${__threadNum}" enabled="true">
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <boolProp name="binaryPayload">false</boolProp>
            <stringProp name="requestData">42[&quot;query&quot;,{&quot;type&quot;:&quot;status&quot;,&quot;requestId&quot;:151.09480933926255,&quot;pulseId&quot;:&quot;${__P(sidCookie)}&quot;,&quot;params&quot;:{&quot;metric_id__in&quot;:&quot;2417,2373,2525&quot;,&quot;element_id__in&quot;:&quot;${ALL_TERMINALS}&quot;,&quot;latestStatus&quot;:true,&quot;stream&quot;:true}}]</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="false">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="sid" elementType="Cookie" testname="sid">
                  <stringProp name="Cookie.value">${sid}</stringProp>
                  <stringProp name="Cookie.domain"></stringProp>
                  <stringProp name="Cookie.path"></stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
              <boolProp name="CookieManager.controlledByThreadGroup">true</boolProp>
            </CookieManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Stats Read WebSocket  PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//Read sockio 

if (prev.getResponseCode().equals(&quot;500&quot;)) {
     prev.setSuccessful(false);
}

if (prev.getResponseCode().equals(&quot;404&quot;)) {
     prev.setSuccessful(false);
}

if (prev.getResponseCode().equals(&quot;502&quot;)) {
     prev.setSuccessful(false);
}

if (prev.getResponseCode().equals(&quot;200&quot;)) {
     prev.setSuccessful(true);
}

if (prev.getResponseCode().equals(&quot;Websocket I/O error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;)) {
	     prev.setSuccessful(true);
	}
}	     </stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script"></stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="WebSocket Single Read Sampler-Auth-Sockio-${__threadNum}" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <stringProp name="dataType">Text</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="optional">true</boolProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-auth-sockio_client" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="147582581">&quot;authenticated&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">Sockio connection is not authenticated</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Scope.variable">response_jmeter_read_sampler</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SamplerJSONResult_errors</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;errors\\&quot;:(\[\]|\[.*\])</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">[]</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Sockio Read PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//Read sockio 

if (prev.getResponseCode().equals(&quot;500&quot;)) {
     prev.setSuccessful(false);
}

if (prev.getResponseCode().equals(&quot;404&quot;)) {
     prev.setSuccessful(false);
}

if (prev.getResponseCode().equals(&quot;502&quot;)) {
     prev.setSuccessful(false);
}

if (prev.getResponseCode().equals(&quot;200&quot;)) {
     prev.setSuccessful(true);
}

if (prev.getResponseCode().equals(&quot;Websocket I/O error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;)) {
	     prev.setSuccessful(true);
	     vars.put(&quot;sockio_reconnect&quot;,&quot;true&quot;);
	}
	prev.setSuccessful(true);
	vars.put(&quot;sockio_reconnect&quot;,&quot;true&quot;);
	
}
if (prev.getResponseCode().equals(&quot;Sampler error&quot;)) {
//Response code: Sampler error
//Response message: Sampler configured for using existing connection, but there is no connection
		//vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
		prev.setSuccessful(true);
		vars.put(&quot;sockio_reconnect&quot;,&quot;true&quot;);
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var currTimeNew = ${__time(/1000,)};
var startTimeNew = Integer.parseInt(vars.get(&quot;start_time1&quot;));
//var startTimeNew = ${startTimeValue}
//log.info(&quot;INSIDE THE IF CONDITION FOR 6 HOURS.......&quot;+startTimeNew

//var startTimeNew = ${startTimeValue}
//log.info(&quot;The current time value is: &quot;+Int.valstartTimeNew);

//props.put(&quot;sessionCookieValue&quot;, vars.get(&quot;Thread_WS_Cookie2&quot;))

//if ( vars.get(&quot;test_duration_1&quot;).equals(&quot;300&quot;)){
//log.info(&quot;INSIDE THE IF CONDITION FOR 6 HOURS.......&quot;);
//for (int i=0; i&lt; = 24; i++ ){
//if ( (i % 2 == 0) || (i ==1)  ){

//var test_duration = ${TEST_DURATION} - 100
//var timePresent = Integer.parseInt(vars.get(&quot;TEST_DURATION&quot;)) - 100

log.info(&quot;The test duration=============&quot;+${TEST_DURATION});
log.info( &quot;In current new and start new : &quot; + String.valueOf(currTimeNew - startTimeNew));
log.info( &quot;In start new : &quot; + String.valueOf(startTimeNew));
log.info( &quot;In current new : &quot; + String.valueOf(currTimeNew));

if ((currTimeNew - startTimeNew) &gt;= ${TEST_DURATION} - 10 ){
	     log.info(&quot;INSIDE THE IF CONDITION FOR TIME COMPARISION....&quot;);
		vars.put(&quot;CLOSE_TIMEOUT&quot;,&quot;true&quot;);
	}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="false">
              <intProp name="OnError.action">5</intProp>
            </ResultAction>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${sockio_reconnect}&quot; == &quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">5</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-sockio-to-send-websocket-close" enabled="true">
            <stringProp name="IfController.condition">&quot;${CLOSE_TIMEOUT}&quot; == &quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <eu.luminis.jmeter.wssampler.CloseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.CloseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.CloseWebSocketSampler" testname="WebSocket Close" enabled="true">
              <stringProp name="statusCode">1000</stringProp>
              <stringProp name="readTimeout">6000</stringProp>
            </eu.luminis.jmeter.wssampler.CloseWebSocketSampler>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="Engine.IO ping/pong-sockio-${__threadNum}" enabled="false">
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <boolProp name="binaryPayload">false</boolProp>
            <stringProp name="requestData">2probe</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
          <hashTree/>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
            <stringProp name="WhileController.condition">true</stringProp>
          </WhileController>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Sockio Read PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//Read sockio 

if (prev.getResponseCode().equals(&quot;500&quot;)) {
     prev.setSuccessful(false);
}

if (prev.getResponseCode().equals(&quot;404&quot;)) {
     prev.setSuccessful(false);
}

if (prev.getResponseCode().equals(&quot;502&quot;)) {
     prev.setSuccessful(false);
}

if (prev.getResponseCode().equals(&quot;200&quot;)) {
     prev.setSuccessful(true);
}

if (prev.getResponseCode().equals(&quot;Websocket I/O error&quot;)) {
	if (prev.getResponseMessage().equals(&quot;WebSocket I/O error: Read timed out&quot;)) {
	     prev.setSuccessful(true);
	     vars.put(&quot;sockio_reconnect&quot;,&quot;true&quot;);
	}
	prev.setSuccessful(true);
	vars.put(&quot;sockio_reconnect&quot;,&quot;true&quot;);
	
}
if (prev.getResponseCode().equals(&quot;Sampler error&quot;)) {
//Response code: Sampler error
//Response message: Sampler configured for using existing connection, but there is no connection
		//vars.put(&quot;alarms_ws_connected&quot;,&quot;false&quot;);
		prev.setSuccessful(true);
		vars.put(&quot;sockio_reconnect&quot;,&quot;true&quot;);
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Generate Summary Results" enabled="true"/>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <boolProp name="RespTimeGraph.seriesselection">true</boolProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="false">
        <stringProp name="FileSaver.filename">test.txt</stringProp>
        <boolProp name="FileSaver.errorsonly">false</boolProp>
        <boolProp name="FileSaver.successonly">false</boolProp>
        <boolProp name="FileSaver.skipsuffix">false</boolProp>
        <boolProp name="FileSaver.skipautonumber">false</boolProp>
        <boolProp name="FileSaver.addTimstamp">true</boolProp>
        <stringProp name="FileSaver.variablename">testResults</stringProp>
      </ResultSaver>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>true</latency>
            <timestamp>false</timestamp>
            <success>true</success>
            <label>false</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">testResults_${build_number}.xml</stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.reporters.FlexibleFileWriter guiclass="kg.apc.jmeter.reporters.FlexibleFileWriterGui" testclass="kg.apc.jmeter.reporters.FlexibleFileWriter" testname="jp@gc - Flexible File Writer" enabled="true">
        <stringProp name="filename">testResults_${build_number}.txt</stringProp>
        <stringProp name="columns">endTimeMillis|\t|responseTime|\t|latency|\t|sentBytes|\t|receivedBytes|\t|isSuccessful|\t|requestData|\t|responseData|\t|responseCode|\t|responseHeaders|\t|responseMessage|\r\n</stringProp>
        <boolProp name="overwrite">true</boolProp>
        <stringProp name="header">endTimeMillis	responseTime	latency	sentBytes	receivedBytes	isSuccessful    requestData responseData responseCode     responseHeaders responseMessage
</stringProp>
        <stringProp name="footer"></stringProp>
      </kg.apc.jmeter.reporters.FlexibleFileWriter>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
